
STM32_Dev_Board-FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b4c  08003b4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b54  08003b54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003b68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003b68  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6b7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cac  00000000  00000000  0002b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010be7  00000000  00000000  0002e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d534  00000000  00000000  0003f587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000651a1  00000000  00000000  0004cabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b1c5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000b1cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a88 	.word	0x08003a88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a88 	.word	0x08003a88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 fa38 	bl	8000744 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 fa33 	bl	8000744 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fmul>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	0244      	lsls	r4, r0, #9
 8000454:	b5e0      	push	{r5, r6, r7, lr}
 8000456:	0045      	lsls	r5, r0, #1
 8000458:	1c0f      	adds	r7, r1, #0
 800045a:	0a64      	lsrs	r4, r4, #9
 800045c:	0e2d      	lsrs	r5, r5, #24
 800045e:	0fc6      	lsrs	r6, r0, #31
 8000460:	2d00      	cmp	r5, #0
 8000462:	d047      	beq.n	80004f4 <__aeabi_fmul+0xac>
 8000464:	2dff      	cmp	r5, #255	; 0xff
 8000466:	d04d      	beq.n	8000504 <__aeabi_fmul+0xbc>
 8000468:	2300      	movs	r3, #0
 800046a:	2080      	movs	r0, #128	; 0x80
 800046c:	469a      	mov	sl, r3
 800046e:	469b      	mov	fp, r3
 8000470:	00e4      	lsls	r4, r4, #3
 8000472:	04c0      	lsls	r0, r0, #19
 8000474:	4304      	orrs	r4, r0
 8000476:	3d7f      	subs	r5, #127	; 0x7f
 8000478:	0278      	lsls	r0, r7, #9
 800047a:	0a43      	lsrs	r3, r0, #9
 800047c:	4699      	mov	r9, r3
 800047e:	007a      	lsls	r2, r7, #1
 8000480:	0ffb      	lsrs	r3, r7, #31
 8000482:	4698      	mov	r8, r3
 8000484:	0e12      	lsrs	r2, r2, #24
 8000486:	464b      	mov	r3, r9
 8000488:	d044      	beq.n	8000514 <__aeabi_fmul+0xcc>
 800048a:	2aff      	cmp	r2, #255	; 0xff
 800048c:	d011      	beq.n	80004b2 <__aeabi_fmul+0x6a>
 800048e:	00d8      	lsls	r0, r3, #3
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	04db      	lsls	r3, r3, #19
 8000494:	4303      	orrs	r3, r0
 8000496:	4699      	mov	r9, r3
 8000498:	2000      	movs	r0, #0
 800049a:	3a7f      	subs	r2, #127	; 0x7f
 800049c:	18ad      	adds	r5, r5, r2
 800049e:	4647      	mov	r7, r8
 80004a0:	4653      	mov	r3, sl
 80004a2:	4077      	eors	r7, r6
 80004a4:	1c69      	adds	r1, r5, #1
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d83f      	bhi.n	800052a <__aeabi_fmul+0xe2>
 80004aa:	4a72      	ldr	r2, [pc, #456]	; (8000674 <__aeabi_fmul+0x22c>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	58d3      	ldr	r3, [r2, r3]
 80004b0:	469f      	mov	pc, r3
 80004b2:	35ff      	adds	r5, #255	; 0xff
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d000      	beq.n	80004ba <__aeabi_fmul+0x72>
 80004b8:	e079      	b.n	80005ae <__aeabi_fmul+0x166>
 80004ba:	4652      	mov	r2, sl
 80004bc:	2302      	movs	r3, #2
 80004be:	431a      	orrs	r2, r3
 80004c0:	4692      	mov	sl, r2
 80004c2:	2002      	movs	r0, #2
 80004c4:	e7eb      	b.n	800049e <__aeabi_fmul+0x56>
 80004c6:	4647      	mov	r7, r8
 80004c8:	464c      	mov	r4, r9
 80004ca:	4683      	mov	fp, r0
 80004cc:	465b      	mov	r3, fp
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d028      	beq.n	8000524 <__aeabi_fmul+0xdc>
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fmul+0x90>
 80004d6:	e0c6      	b.n	8000666 <__aeabi_fmul+0x21e>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d14f      	bne.n	800057c <__aeabi_fmul+0x134>
 80004dc:	2000      	movs	r0, #0
 80004de:	2400      	movs	r4, #0
 80004e0:	05c0      	lsls	r0, r0, #23
 80004e2:	07ff      	lsls	r7, r7, #31
 80004e4:	4320      	orrs	r0, r4
 80004e6:	4338      	orrs	r0, r7
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f4:	2c00      	cmp	r4, #0
 80004f6:	d171      	bne.n	80005dc <__aeabi_fmul+0x194>
 80004f8:	2304      	movs	r3, #4
 80004fa:	469a      	mov	sl, r3
 80004fc:	3b03      	subs	r3, #3
 80004fe:	2500      	movs	r5, #0
 8000500:	469b      	mov	fp, r3
 8000502:	e7b9      	b.n	8000478 <__aeabi_fmul+0x30>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d163      	bne.n	80005d0 <__aeabi_fmul+0x188>
 8000508:	2308      	movs	r3, #8
 800050a:	469a      	mov	sl, r3
 800050c:	3b06      	subs	r3, #6
 800050e:	25ff      	movs	r5, #255	; 0xff
 8000510:	469b      	mov	fp, r3
 8000512:	e7b1      	b.n	8000478 <__aeabi_fmul+0x30>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d150      	bne.n	80005ba <__aeabi_fmul+0x172>
 8000518:	4652      	mov	r2, sl
 800051a:	3301      	adds	r3, #1
 800051c:	431a      	orrs	r2, r3
 800051e:	4692      	mov	sl, r2
 8000520:	2001      	movs	r0, #1
 8000522:	e7bc      	b.n	800049e <__aeabi_fmul+0x56>
 8000524:	20ff      	movs	r0, #255	; 0xff
 8000526:	2400      	movs	r4, #0
 8000528:	e7da      	b.n	80004e0 <__aeabi_fmul+0x98>
 800052a:	4648      	mov	r0, r9
 800052c:	0c26      	lsrs	r6, r4, #16
 800052e:	0424      	lsls	r4, r4, #16
 8000530:	0c22      	lsrs	r2, r4, #16
 8000532:	0404      	lsls	r4, r0, #16
 8000534:	0c24      	lsrs	r4, r4, #16
 8000536:	464b      	mov	r3, r9
 8000538:	0020      	movs	r0, r4
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	4350      	muls	r0, r2
 800053e:	4374      	muls	r4, r6
 8000540:	435a      	muls	r2, r3
 8000542:	435e      	muls	r6, r3
 8000544:	1912      	adds	r2, r2, r4
 8000546:	0c03      	lsrs	r3, r0, #16
 8000548:	189b      	adds	r3, r3, r2
 800054a:	429c      	cmp	r4, r3
 800054c:	d903      	bls.n	8000556 <__aeabi_fmul+0x10e>
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	0252      	lsls	r2, r2, #9
 8000552:	4694      	mov	ip, r2
 8000554:	4466      	add	r6, ip
 8000556:	0400      	lsls	r0, r0, #16
 8000558:	041a      	lsls	r2, r3, #16
 800055a:	0c00      	lsrs	r0, r0, #16
 800055c:	1812      	adds	r2, r2, r0
 800055e:	0194      	lsls	r4, r2, #6
 8000560:	1e60      	subs	r0, r4, #1
 8000562:	4184      	sbcs	r4, r0
 8000564:	0c1b      	lsrs	r3, r3, #16
 8000566:	0e92      	lsrs	r2, r2, #26
 8000568:	199b      	adds	r3, r3, r6
 800056a:	4314      	orrs	r4, r2
 800056c:	019b      	lsls	r3, r3, #6
 800056e:	431c      	orrs	r4, r3
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	d572      	bpl.n	800065a <__aeabi_fmul+0x212>
 8000574:	2001      	movs	r0, #1
 8000576:	0863      	lsrs	r3, r4, #1
 8000578:	4004      	ands	r4, r0
 800057a:	431c      	orrs	r4, r3
 800057c:	0008      	movs	r0, r1
 800057e:	307f      	adds	r0, #127	; 0x7f
 8000580:	2800      	cmp	r0, #0
 8000582:	dd3c      	ble.n	80005fe <__aeabi_fmul+0x1b6>
 8000584:	0763      	lsls	r3, r4, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fmul+0x14a>
 8000588:	230f      	movs	r3, #15
 800058a:	4023      	ands	r3, r4
 800058c:	2b04      	cmp	r3, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fmul+0x14a>
 8000590:	3404      	adds	r4, #4
 8000592:	0123      	lsls	r3, r4, #4
 8000594:	d503      	bpl.n	800059e <__aeabi_fmul+0x156>
 8000596:	3180      	adds	r1, #128	; 0x80
 8000598:	0008      	movs	r0, r1
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <__aeabi_fmul+0x230>)
 800059c:	401c      	ands	r4, r3
 800059e:	28fe      	cmp	r0, #254	; 0xfe
 80005a0:	dcc0      	bgt.n	8000524 <__aeabi_fmul+0xdc>
 80005a2:	01a4      	lsls	r4, r4, #6
 80005a4:	0a64      	lsrs	r4, r4, #9
 80005a6:	b2c0      	uxtb	r0, r0
 80005a8:	e79a      	b.n	80004e0 <__aeabi_fmul+0x98>
 80005aa:	0037      	movs	r7, r6
 80005ac:	e78e      	b.n	80004cc <__aeabi_fmul+0x84>
 80005ae:	4652      	mov	r2, sl
 80005b0:	2303      	movs	r3, #3
 80005b2:	431a      	orrs	r2, r3
 80005b4:	4692      	mov	sl, r2
 80005b6:	2003      	movs	r0, #3
 80005b8:	e771      	b.n	800049e <__aeabi_fmul+0x56>
 80005ba:	4648      	mov	r0, r9
 80005bc:	f000 f8a4 	bl	8000708 <__clzsi2>
 80005c0:	464a      	mov	r2, r9
 80005c2:	1f43      	subs	r3, r0, #5
 80005c4:	409a      	lsls	r2, r3
 80005c6:	1a2d      	subs	r5, r5, r0
 80005c8:	4691      	mov	r9, r2
 80005ca:	2000      	movs	r0, #0
 80005cc:	3d76      	subs	r5, #118	; 0x76
 80005ce:	e766      	b.n	800049e <__aeabi_fmul+0x56>
 80005d0:	230c      	movs	r3, #12
 80005d2:	469a      	mov	sl, r3
 80005d4:	3b09      	subs	r3, #9
 80005d6:	25ff      	movs	r5, #255	; 0xff
 80005d8:	469b      	mov	fp, r3
 80005da:	e74d      	b.n	8000478 <__aeabi_fmul+0x30>
 80005dc:	0020      	movs	r0, r4
 80005de:	f000 f893 	bl	8000708 <__clzsi2>
 80005e2:	2576      	movs	r5, #118	; 0x76
 80005e4:	1f43      	subs	r3, r0, #5
 80005e6:	409c      	lsls	r4, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	426d      	negs	r5, r5
 80005ec:	469a      	mov	sl, r3
 80005ee:	469b      	mov	fp, r3
 80005f0:	1a2d      	subs	r5, r5, r0
 80005f2:	e741      	b.n	8000478 <__aeabi_fmul+0x30>
 80005f4:	2480      	movs	r4, #128	; 0x80
 80005f6:	2700      	movs	r7, #0
 80005f8:	20ff      	movs	r0, #255	; 0xff
 80005fa:	03e4      	lsls	r4, r4, #15
 80005fc:	e770      	b.n	80004e0 <__aeabi_fmul+0x98>
 80005fe:	2301      	movs	r3, #1
 8000600:	1a1b      	subs	r3, r3, r0
 8000602:	2b1b      	cmp	r3, #27
 8000604:	dd00      	ble.n	8000608 <__aeabi_fmul+0x1c0>
 8000606:	e769      	b.n	80004dc <__aeabi_fmul+0x94>
 8000608:	319e      	adds	r1, #158	; 0x9e
 800060a:	0020      	movs	r0, r4
 800060c:	408c      	lsls	r4, r1
 800060e:	40d8      	lsrs	r0, r3
 8000610:	1e63      	subs	r3, r4, #1
 8000612:	419c      	sbcs	r4, r3
 8000614:	4304      	orrs	r4, r0
 8000616:	0763      	lsls	r3, r4, #29
 8000618:	d004      	beq.n	8000624 <__aeabi_fmul+0x1dc>
 800061a:	230f      	movs	r3, #15
 800061c:	4023      	ands	r3, r4
 800061e:	2b04      	cmp	r3, #4
 8000620:	d000      	beq.n	8000624 <__aeabi_fmul+0x1dc>
 8000622:	3404      	adds	r4, #4
 8000624:	0163      	lsls	r3, r4, #5
 8000626:	d51a      	bpl.n	800065e <__aeabi_fmul+0x216>
 8000628:	2001      	movs	r0, #1
 800062a:	2400      	movs	r4, #0
 800062c:	e758      	b.n	80004e0 <__aeabi_fmul+0x98>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4204      	tst	r4, r0
 8000634:	d009      	beq.n	800064a <__aeabi_fmul+0x202>
 8000636:	464b      	mov	r3, r9
 8000638:	4203      	tst	r3, r0
 800063a:	d106      	bne.n	800064a <__aeabi_fmul+0x202>
 800063c:	464c      	mov	r4, r9
 800063e:	4304      	orrs	r4, r0
 8000640:	0264      	lsls	r4, r4, #9
 8000642:	4647      	mov	r7, r8
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	e74a      	b.n	80004e0 <__aeabi_fmul+0x98>
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4304      	orrs	r4, r0
 8000650:	0264      	lsls	r4, r4, #9
 8000652:	0037      	movs	r7, r6
 8000654:	20ff      	movs	r0, #255	; 0xff
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	e742      	b.n	80004e0 <__aeabi_fmul+0x98>
 800065a:	0029      	movs	r1, r5
 800065c:	e78e      	b.n	800057c <__aeabi_fmul+0x134>
 800065e:	01a4      	lsls	r4, r4, #6
 8000660:	2000      	movs	r0, #0
 8000662:	0a64      	lsrs	r4, r4, #9
 8000664:	e73c      	b.n	80004e0 <__aeabi_fmul+0x98>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4304      	orrs	r4, r0
 800066c:	0264      	lsls	r4, r4, #9
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	e735      	b.n	80004e0 <__aeabi_fmul+0x98>
 8000674:	08003aa0 	.word	0x08003aa0
 8000678:	f7ffffff 	.word	0xf7ffffff

0800067c <__aeabi_i2f>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	2800      	cmp	r0, #0
 8000680:	d013      	beq.n	80006aa <__aeabi_i2f+0x2e>
 8000682:	17c3      	asrs	r3, r0, #31
 8000684:	18c5      	adds	r5, r0, r3
 8000686:	405d      	eors	r5, r3
 8000688:	0fc4      	lsrs	r4, r0, #31
 800068a:	0028      	movs	r0, r5
 800068c:	f000 f83c 	bl	8000708 <__clzsi2>
 8000690:	239e      	movs	r3, #158	; 0x9e
 8000692:	0001      	movs	r1, r0
 8000694:	1a1b      	subs	r3, r3, r0
 8000696:	2b96      	cmp	r3, #150	; 0x96
 8000698:	dc0f      	bgt.n	80006ba <__aeabi_i2f+0x3e>
 800069a:	2808      	cmp	r0, #8
 800069c:	dd01      	ble.n	80006a2 <__aeabi_i2f+0x26>
 800069e:	3908      	subs	r1, #8
 80006a0:	408d      	lsls	r5, r1
 80006a2:	026d      	lsls	r5, r5, #9
 80006a4:	0a6d      	lsrs	r5, r5, #9
 80006a6:	b2d8      	uxtb	r0, r3
 80006a8:	e002      	b.n	80006b0 <__aeabi_i2f+0x34>
 80006aa:	2400      	movs	r4, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	2500      	movs	r5, #0
 80006b0:	05c0      	lsls	r0, r0, #23
 80006b2:	4328      	orrs	r0, r5
 80006b4:	07e4      	lsls	r4, r4, #31
 80006b6:	4320      	orrs	r0, r4
 80006b8:	bd70      	pop	{r4, r5, r6, pc}
 80006ba:	2b99      	cmp	r3, #153	; 0x99
 80006bc:	dd0b      	ble.n	80006d6 <__aeabi_i2f+0x5a>
 80006be:	2205      	movs	r2, #5
 80006c0:	002e      	movs	r6, r5
 80006c2:	1a12      	subs	r2, r2, r0
 80006c4:	40d6      	lsrs	r6, r2
 80006c6:	0002      	movs	r2, r0
 80006c8:	321b      	adds	r2, #27
 80006ca:	4095      	lsls	r5, r2
 80006cc:	0028      	movs	r0, r5
 80006ce:	1e45      	subs	r5, r0, #1
 80006d0:	41a8      	sbcs	r0, r5
 80006d2:	0035      	movs	r5, r6
 80006d4:	4305      	orrs	r5, r0
 80006d6:	2905      	cmp	r1, #5
 80006d8:	dd01      	ble.n	80006de <__aeabi_i2f+0x62>
 80006da:	1f4a      	subs	r2, r1, #5
 80006dc:	4095      	lsls	r5, r2
 80006de:	002a      	movs	r2, r5
 80006e0:	4e08      	ldr	r6, [pc, #32]	; (8000704 <__aeabi_i2f+0x88>)
 80006e2:	4032      	ands	r2, r6
 80006e4:	0768      	lsls	r0, r5, #29
 80006e6:	d009      	beq.n	80006fc <__aeabi_i2f+0x80>
 80006e8:	200f      	movs	r0, #15
 80006ea:	4028      	ands	r0, r5
 80006ec:	2804      	cmp	r0, #4
 80006ee:	d005      	beq.n	80006fc <__aeabi_i2f+0x80>
 80006f0:	3204      	adds	r2, #4
 80006f2:	0150      	lsls	r0, r2, #5
 80006f4:	d502      	bpl.n	80006fc <__aeabi_i2f+0x80>
 80006f6:	239f      	movs	r3, #159	; 0x9f
 80006f8:	4032      	ands	r2, r6
 80006fa:	1a5b      	subs	r3, r3, r1
 80006fc:	0192      	lsls	r2, r2, #6
 80006fe:	0a55      	lsrs	r5, r2, #9
 8000700:	b2d8      	uxtb	r0, r3
 8000702:	e7d5      	b.n	80006b0 <__aeabi_i2f+0x34>
 8000704:	fbffffff 	.word	0xfbffffff

08000708 <__clzsi2>:
 8000708:	211c      	movs	r1, #28
 800070a:	2301      	movs	r3, #1
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	4298      	cmp	r0, r3
 8000710:	d301      	bcc.n	8000716 <__clzsi2+0xe>
 8000712:	0c00      	lsrs	r0, r0, #16
 8000714:	3910      	subs	r1, #16
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	4298      	cmp	r0, r3
 800071a:	d301      	bcc.n	8000720 <__clzsi2+0x18>
 800071c:	0a00      	lsrs	r0, r0, #8
 800071e:	3908      	subs	r1, #8
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	4298      	cmp	r0, r3
 8000724:	d301      	bcc.n	800072a <__clzsi2+0x22>
 8000726:	0900      	lsrs	r0, r0, #4
 8000728:	3904      	subs	r1, #4
 800072a:	a202      	add	r2, pc, #8	; (adr r2, 8000734 <__clzsi2+0x2c>)
 800072c:	5c10      	ldrb	r0, [r2, r0]
 800072e:	1840      	adds	r0, r0, r1
 8000730:	4770      	bx	lr
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	02020304 	.word	0x02020304
 8000738:	01010101 	.word	0x01010101
	...

08000744 <__clzdi2>:
 8000744:	b510      	push	{r4, lr}
 8000746:	2900      	cmp	r1, #0
 8000748:	d103      	bne.n	8000752 <__clzdi2+0xe>
 800074a:	f7ff ffdd 	bl	8000708 <__clzsi2>
 800074e:	3020      	adds	r0, #32
 8000750:	e002      	b.n	8000758 <__clzdi2+0x14>
 8000752:	1c08      	adds	r0, r1, #0
 8000754:	f7ff ffd8 	bl	8000708 <__clzsi2>
 8000758:	bd10      	pop	{r4, pc}
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <LIS2HH12_Initialize>:
 *      Author: Ty
 */

#include "LIS2HH12.h"

uint8_t LIS2HH12_Initialize(LIS2HH12 *device, I2C_HandleTypeDef *i2c_handle) {
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	device->i2c_handle = i2c_handle;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	601a      	str	r2, [r3, #0]
	device->acc_data[0] = 0.0F;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
	device->acc_data[1] = 0.0F;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	device->acc_data[2] = 0.0F;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]

	uint8_t num_errors = 0;
 800077e:	250f      	movs	r5, #15
 8000780:	197b      	adds	r3, r7, r5
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	uint8_t reg_data;
	uint8_t write_val;

	/* Verify I2C via WHO_AM_I register and expected value */
	status = LIS2HH12_ReadRegister(device, LIS2HH12_REG_WHO_AM_I, &reg_data);
 8000786:	260e      	movs	r6, #14
 8000788:	19bc      	adds	r4, r7, r6
 800078a:	230d      	movs	r3, #13
 800078c:	18fa      	adds	r2, r7, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	210f      	movs	r1, #15
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f8ce 	bl	8000934 <LIS2HH12_ReadRegister>
 8000798:	0003      	movs	r3, r0
 800079a:	7023      	strb	r3, [r4, #0]
	num_errors += (status != HAL_OK);
 800079c:	19bb      	adds	r3, r7, r6
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	4193      	sbcs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	0019      	movs	r1, r3
 80007a8:	197b      	adds	r3, r7, r5
 80007aa:	197a      	adds	r2, r7, r5
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	188a      	adds	r2, r1, r2
 80007b0:	701a      	strb	r2, [r3, #0]

	if (reg_data != LIS2HH12_WHO_AM_I) {
 80007b2:	230d      	movs	r3, #13
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b41      	cmp	r3, #65	; 0x41
 80007ba:	d001      	beq.n	80007c0 <LIS2HH12_Initialize+0x64>
		return 255;
 80007bc:	23ff      	movs	r3, #255	; 0xff
 80007be:	e04c      	b.n	800085a <LIS2HH12_Initialize+0xfe>
	}

	/* Setup control registers */
	/* Enable high-res, set output data rate (200Hz) and enable all axes */
	write_val = 0xC7;
 80007c0:	260c      	movs	r6, #12
 80007c2:	19bb      	adds	r3, r7, r6
 80007c4:	22c7      	movs	r2, #199	; 0xc7
 80007c6:	701a      	strb	r2, [r3, #0]
	status = LIS2HH12_WriteRegister(device, LIS2HH12_REG_CTRL1, &write_val);
 80007c8:	250e      	movs	r5, #14
 80007ca:	197c      	adds	r4, r7, r5
 80007cc:	19ba      	adds	r2, r7, r6
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2120      	movs	r1, #32
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f8f3 	bl	80009be <LIS2HH12_WriteRegister>
 80007d8:	0003      	movs	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]
	num_errors += (status != HAL_OK);
 80007dc:	0028      	movs	r0, r5
 80007de:	183b      	adds	r3, r7, r0
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	1e5a      	subs	r2, r3, #1
 80007e4:	4193      	sbcs	r3, r2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	0019      	movs	r1, r3
 80007ea:	250f      	movs	r5, #15
 80007ec:	197b      	adds	r3, r7, r5
 80007ee:	197a      	adds	r2, r7, r5
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	188a      	adds	r2, r1, r2
 80007f4:	701a      	strb	r2, [r3, #0]

	/* Set low-pass cutoff frequency (ODR/9) and disable high-pass filter */
	write_val = 0x58;
 80007f6:	19bb      	adds	r3, r7, r6
 80007f8:	2258      	movs	r2, #88	; 0x58
 80007fa:	701a      	strb	r2, [r3, #0]
	status = LIS2HH12_WriteRegister(device, LIS2HH12_REG_CTRL2, &write_val);
 80007fc:	183c      	adds	r4, r7, r0
 80007fe:	19ba      	adds	r2, r7, r6
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2121      	movs	r1, #33	; 0x21
 8000804:	0018      	movs	r0, r3
 8000806:	f000 f8da 	bl	80009be <LIS2HH12_WriteRegister>
 800080a:	0003      	movs	r3, r0
 800080c:	7023      	strb	r3, [r4, #0]
	num_errors += (status != HAL_OK);
 800080e:	200e      	movs	r0, #14
 8000810:	183b      	adds	r3, r7, r0
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	4193      	sbcs	r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	0019      	movs	r1, r3
 800081c:	197b      	adds	r3, r7, r5
 800081e:	197a      	adds	r2, r7, r5
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	188a      	adds	r2, r1, r2
 8000824:	701a      	strb	r2, [r3, #0]

	/* Set INT1 to Data Ready signal */
	write_val = 0x01;
 8000826:	19bb      	adds	r3, r7, r6
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
	status = LIS2HH12_WriteRegister(device, LIS2HH12_REG_CTRL3, &write_val);
 800082c:	183c      	adds	r4, r7, r0
 800082e:	19ba      	adds	r2, r7, r6
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2122      	movs	r1, #34	; 0x22
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f8c2 	bl	80009be <LIS2HH12_WriteRegister>
 800083a:	0003      	movs	r3, r0
 800083c:	7023      	strb	r3, [r4, #0]
	num_errors += (status != HAL_OK);
 800083e:	200e      	movs	r0, #14
 8000840:	183b      	adds	r3, r7, r0
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4193      	sbcs	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	0019      	movs	r1, r3
 800084c:	197b      	adds	r3, r7, r5
 800084e:	197a      	adds	r2, r7, r5
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	188a      	adds	r2, r1, r2
 8000854:	701a      	strb	r2, [r3, #0]

	return num_errors;
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b005      	add	sp, #20
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000864 <LIS2HH12_ReadOrientation>:

HAL_StatusTypeDef LIS2HH12_ReadOrientation(LIS2HH12 *device) {
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	uint8_t reg_data[6];
	HAL_StatusTypeDef status = LIS2HH12_ReadRegisters(device, LIS2HH12_REG_OUT_X_L, &reg_data, 6);
 800086c:	2617      	movs	r6, #23
 800086e:	19bc      	adds	r4, r7, r6
 8000870:	2510      	movs	r5, #16
 8000872:	197a      	adds	r2, r7, r5
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	2306      	movs	r3, #6
 8000878:	2128      	movs	r1, #40	; 0x28
 800087a:	f000 f879 	bl	8000970 <LIS2HH12_ReadRegisters>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	int16_t raw_data[3];
	raw_data[0] = (((int16_t) reg_data[1]) << 8) | ((int16_t) reg_data[0]);
 8000882:	0029      	movs	r1, r5
 8000884:	187b      	adds	r3, r7, r1
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	187b      	adds	r3, r7, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21a      	sxth	r2, r3
 8000896:	2008      	movs	r0, #8
 8000898:	183b      	adds	r3, r7, r0
 800089a:	801a      	strh	r2, [r3, #0]
	raw_data[1] = (((int16_t) reg_data[3]) << 8) | ((int16_t) reg_data[2]);
 800089c:	187b      	adds	r3, r7, r1
 800089e:	78db      	ldrb	r3, [r3, #3]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	789b      	ldrb	r3, [r3, #2]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	805a      	strh	r2, [r3, #2]
	raw_data[2] = (((int16_t) reg_data[5]) << 8) | ((int16_t) reg_data[4]);
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	0004      	movs	r4, r0
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	809a      	strh	r2, [r3, #4]

	/* (FS * g) / 2^n_bits */
	/* (2 * 9.81) / 2^15 */
	device->acc_data[0] = 0.0005987548828F * raw_data[0];
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	5e9b      	ldrsh	r3, [r3, r2]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff fed3 	bl	800067c <__aeabi_i2f>
 80008d6:	1c03      	adds	r3, r0, #0
 80008d8:	4915      	ldr	r1, [pc, #84]	; (8000930 <LIS2HH12_ReadOrientation+0xcc>)
 80008da:	1c18      	adds	r0, r3, #0
 80008dc:	f7ff fdb4 	bl	8000448 <__aeabi_fmul>
 80008e0:	1c03      	adds	r3, r0, #0
 80008e2:	1c1a      	adds	r2, r3, #0
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]
	device->acc_data[1] = 0.0005987548828F * raw_data[1];
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2202      	movs	r2, #2
 80008ec:	5e9b      	ldrsh	r3, [r3, r2]
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fec4 	bl	800067c <__aeabi_i2f>
 80008f4:	1c03      	adds	r3, r0, #0
 80008f6:	490e      	ldr	r1, [pc, #56]	; (8000930 <LIS2HH12_ReadOrientation+0xcc>)
 80008f8:	1c18      	adds	r0, r3, #0
 80008fa:	f7ff fda5 	bl	8000448 <__aeabi_fmul>
 80008fe:	1c03      	adds	r3, r0, #0
 8000900:	1c1a      	adds	r2, r3, #0
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	609a      	str	r2, [r3, #8]
	device->acc_data[2] = 0.0005987548828F * raw_data[2];
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2204      	movs	r2, #4
 800090a:	5e9b      	ldrsh	r3, [r3, r2]
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff feb5 	bl	800067c <__aeabi_i2f>
 8000912:	1c03      	adds	r3, r0, #0
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <LIS2HH12_ReadOrientation+0xcc>)
 8000916:	1c18      	adds	r0, r3, #0
 8000918:	f7ff fd96 	bl	8000448 <__aeabi_fmul>
 800091c:	1c03      	adds	r3, r0, #0
 800091e:	1c1a      	adds	r2, r3, #0
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]

	return status;
 8000924:	19bb      	adds	r3, r7, r6
 8000926:	781b      	ldrb	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b007      	add	sp, #28
 800092e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000930:	3a1cf5c3 	.word	0x3a1cf5c3

08000934 <LIS2HH12_ReadRegister>:

HAL_StatusTypeDef LIS2HH12_ReadRegister(LIS2HH12 *device, uint8_t reg, uint8_t *data) {
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af04      	add	r7, sp, #16
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	240b      	movs	r4, #11
 8000940:	193b      	adds	r3, r7, r4
 8000942:	1c0a      	adds	r2, r1, #0
 8000944:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(device->i2c_handle, LIS2HH12_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	193b      	adds	r3, r7, r4
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b29a      	uxth	r2, r3
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	213c      	movs	r1, #60	; 0x3c
 8000962:	f001 f8db 	bl	8001b1c <HAL_I2C_Mem_Read>
 8000966:	0003      	movs	r3, r0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b005      	add	sp, #20
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <LIS2HH12_ReadRegisters>:

HAL_StatusTypeDef LIS2HH12_ReadRegisters(LIS2HH12 *device, uint8_t reg, uint8_t *data, uint8_t length) {
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af04      	add	r7, sp, #16
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	0008      	movs	r0, r1
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	0019      	movs	r1, r3
 800097e:	240b      	movs	r4, #11
 8000980:	193b      	adds	r3, r7, r4
 8000982:	1c02      	adds	r2, r0, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	250a      	movs	r5, #10
 8000988:	197b      	adds	r3, r7, r5
 800098a:	1c0a      	adds	r2, r1, #0
 800098c:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(device->i2c_handle, LIS2HH12_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	193b      	adds	r3, r7, r4
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b299      	uxth	r1, r3
 8000998:	197b      	adds	r3, r7, r5
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	2201      	movs	r2, #1
 80009a0:	4252      	negs	r2, r2
 80009a2:	9202      	str	r2, [sp, #8]
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	000a      	movs	r2, r1
 80009ae:	213c      	movs	r1, #60	; 0x3c
 80009b0:	f001 f8b4 	bl	8001b1c <HAL_I2C_Mem_Read>
 80009b4:	0003      	movs	r3, r0
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bdb0      	pop	{r4, r5, r7, pc}

080009be <LIS2HH12_WriteRegister>:

HAL_StatusTypeDef LIS2HH12_WriteRegister(LIS2HH12 *device, uint8_t reg, uint8_t *data) {
 80009be:	b590      	push	{r4, r7, lr}
 80009c0:	b089      	sub	sp, #36	; 0x24
 80009c2:	af04      	add	r7, sp, #16
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	240b      	movs	r4, #11
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	1c0a      	adds	r2, r1, #0
 80009ce:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(device->i2c_handle, LIS2HH12_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	2301      	movs	r3, #1
 80009dc:	425b      	negs	r3, r3
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	2301      	movs	r3, #1
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	213c      	movs	r1, #60	; 0x3c
 80009ec:	f000 ff68 	bl	80018c0 <HAL_I2C_Mem_Write>
 80009f0:	0003      	movs	r3, r0
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b005      	add	sp, #20
 80009f8:	bd90      	pop	{r4, r7, pc}
	...

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	d828      	bhi.n	8000a64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	33c0      	adds	r3, #192	; 0xc0
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	589b      	ldr	r3, [r3, r2]
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	0011      	movs	r1, r2
 8000a28:	2203      	movs	r2, #3
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	21ff      	movs	r1, #255	; 0xff
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	22ff      	movs	r2, #255	; 0xff
 8000a40:	401a      	ands	r2, r3
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0018      	movs	r0, r3
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	33c0      	adds	r3, #192	; 0xc0
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a62:	e031      	b.n	8000ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	400b      	ands	r3, r1
 8000a70:	3b08      	subs	r3, #8
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3306      	adds	r3, #6
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	4023      	ands	r3, r4
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	3306      	adds	r3, #6
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	18c3      	adds	r3, r0, r3
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	045b      	lsls	r3, r3, #17
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d301      	bcc.n	8000af0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aec:	2301      	movs	r3, #1
 8000aee:	e010      	b.n	8000b12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SysTick_Config+0x44>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	3a01      	subs	r2, #1
 8000af6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	2103      	movs	r1, #3
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff ff7c 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x44>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0002      	movs	r2, r0
 8000b28:	1dbb      	adds	r3, r7, #6
 8000b2a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_10) {
 8000b2c:	1dbb      	adds	r3, r7, #6
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d102      	bne.n	8000b3e <HAL_GPIO_EXTI_Callback+0x1e>
		acc_data_ready = 1;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000084 	.word	0x20000084

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fb29 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f839 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f947 	bl	8000dec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b5e:	f000 f89d 	bl	8000c9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b62:	f000 f8db 	bl	8000d1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 f911 	bl	8000d8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Context switch code

  // Initialize accelerometer
  LIS2HH12_Initialize(&acc, &hi2c1);
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <main+0x70>)
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <main+0x74>)
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fdf3 	bl	800075c <LIS2HH12_Initialize>

  // Set priorities
  NVIC_SetPriority(PendSV_IRQn, 0xFF); // Lowest priority
 8000b76:	2302      	movs	r3, #2
 8000b78:	425b      	negs	r3, r3
 8000b7a:	21ff      	movs	r1, #255	; 0xff
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff ff3d 	bl	80009fc <__NVIC_SetPriority>
  NVIC_SetPriority(SysTick_IRQn, 0x00); // Highest priority
 8000b82:	2301      	movs	r3, #1
 8000b84:	425b      	negs	r3, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff37 	bl	80009fc <__NVIC_SetPriority>



  uint32_t ret_val = SysTick_Config(SystemCoreClock);
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <main+0x78>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ffa0 	bl	8000ad8 <SysTick_Config>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	607b      	str	r3, [r7, #4]
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  acc_data_ready = 0;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <main+0x7c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if (acc_data_ready) {
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <main+0x7c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0fb      	beq.n	8000ba2 <main+0x56>
		  LIS2HH12_ReadOrientation(&acc);
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <main+0x74>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fe59 	bl	8000864 <LIS2HH12_ReadOrientation>
		  acc_data_ready = 0;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <main+0x7c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	  if (acc_data_ready) {
 8000bb8:	e7f3      	b.n	8000ba2 <main+0x56>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000038 	.word	0x20000038
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000084 	.word	0x20000084

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b099      	sub	sp, #100	; 0x64
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	242c      	movs	r4, #44	; 0x2c
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2334      	movs	r3, #52	; 0x34
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f002 ff4b 	bl	8003a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	2318      	movs	r3, #24
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	0018      	movs	r0, r3
 8000be8:	2314      	movs	r3, #20
 8000bea:	001a      	movs	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f002 ff43 	bl	8003a78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2318      	movs	r3, #24
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f002 ff3c 	bl	8003a78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <SystemClock_Config+0xc8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <SystemClock_Config+0xcc>)
 8000c06:	401a      	ands	r2, r3
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <SystemClock_Config+0xc8>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0109      	lsls	r1, r1, #4
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	0252      	lsls	r2, r2, #9
 8000c1e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fb81 	bl	8002330 <HAL_RCC_OscConfig>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f983 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	2118      	movs	r1, #24
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fee4 	bl	8002a28 <HAL_RCC_ClockConfig>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c64:	f000 f96a 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000c68:	003b      	movs	r3, r7
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6e:	003b      	movs	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c74:	003b      	movs	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f002 f8f7 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c86:	f000 f959 	bl	8000f3c <Error_Handler>
  }
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b019      	add	sp, #100	; 0x64
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40007000 	.word	0x40007000
 8000c98:	ffffe7ff 	.word	0xffffe7ff

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fd5b 	bl	8001794 <HAL_I2C_Init>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 f92b 	bl	8000f3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fa88 	bl	8002200 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f922 	bl	8000f3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 facb 	bl	8002298 <HAL_I2CEx_ConfigDigitalFilter>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f919 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000038 	.word	0x20000038
 8000d14:	40005400 	.word	0x40005400
 8000d18:	2000090e 	.word	0x2000090e

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_SPI1_Init+0x6c>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d28:	2282      	movs	r2, #130	; 0x82
 8000d2a:	0052      	lsls	r2, r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0212      	lsls	r2, r2, #8
 8000d34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 f9a3 	bl	80030bc <HAL_SPI_Init>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d7a:	f000 f8df 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000088 	.word	0x20000088
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART2_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000d98:	2296      	movs	r2, #150	; 0x96
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x58>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 f9fd 	bl	80031d0 <HAL_UART_Init>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f8af 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000e0 	.word	0x200000e0
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	240c      	movs	r4, #12
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	0018      	movs	r0, r3
 8000df8:	2314      	movs	r3, #20
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f002 fe3b 	bl	8003a78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e26:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e38:	2102      	movs	r1, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <MX_GPIO_Init+0x140>)
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	2202      	movs	r2, #2
 8000e44:	4013      	ands	r3, r2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LED_GP_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8000e4a:	4939      	ldr	r1, [pc, #228]	; (8000f30 <MX_GPIO_Init+0x144>)
 8000e4c:	23a0      	movs	r3, #160	; 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	2200      	movs	r2, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fc64 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_A0_Pin|LCD_LED_Pin, GPIO_PIN_RESET);
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <MX_GPIO_Init+0x148>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2107      	movs	r1, #7
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fc5e 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_CBUS3_Pin */
  GPIO_InitStruct.Pin = USB_CBUS3_Pin;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2202      	movs	r2, #2
 8000e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_CBUS3_GPIO_Port, &GPIO_InitStruct);
 8000e76:	193a      	adds	r2, r7, r4
 8000e78:	23a0      	movs	r3, #160	; 0xa0
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fae0 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LED_GP_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LED_GP_Pin|LED_STATUS_Pin;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <MX_GPIO_Init+0x144>)
 8000e88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	193a      	adds	r2, r7, r4
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f000 facd 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_A0_Pin LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_A0_Pin|LCD_LED_Pin;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <MX_GPIO_Init+0x148>)
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f000 fabb 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_EXT_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_EXT_Pin;
 8000ece:	0021      	movs	r1, r4
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed8:	000c      	movs	r4, r1
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_GPIO_Init+0x14c>)
 8000ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_EXT_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_GPIO_Init+0x148>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f000 faa9 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_GP1_Pin SW_GP2_Pin SW_GP3_Pin */
  GPIO_InitStruct.Pin = SW_GP1_Pin|SW_GP2_Pin|SW_GP3_Pin;
 8000ef2:	0021      	movs	r1, r4
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	22e0      	movs	r2, #224	; 0xe0
 8000ef8:	01d2      	lsls	r2, r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <MX_GPIO_Init+0x148>)
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0010      	movs	r0, r2
 8000f10:	f000 fa98 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2007      	movs	r0, #7
 8000f1a:	f000 fa61 	bl	80013e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 fa73 	bl	800140a <HAL_NVIC_EnableIRQ>

}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b009      	add	sp, #36	; 0x24
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	00001810 	.word	0x00001810
 8000f34:	50000400 	.word	0x50000400
 8000f38:	10110000 	.word	0x10110000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_MspInit+0x24>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x24>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_MspInit+0x24>)
 8000f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_MspInit+0x24>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0549      	lsls	r1, r1, #21
 8000f62:	430a      	orrs	r2, r1
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	240c      	movs	r4, #12
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2314      	movs	r3, #20
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f002 fd78 	bl	8003a78 <memset>
  if(hi2c->Instance==I2C1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12a      	bne.n	8000fe8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	22c0      	movs	r2, #192	; 0xc0
 8000fae:	00d2      	lsls	r2, r2, #3
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2212      	movs	r2, #18
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	187a      	adds	r2, r7, r1
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fa35 	bl	8001444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0389      	lsls	r1, r1, #14
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b009      	add	sp, #36	; 0x24
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	240c      	movs	r4, #12
 8001002:	193b      	adds	r3, r7, r4
 8001004:	0018      	movs	r0, r3
 8001006:	2314      	movs	r3, #20
 8001008:	001a      	movs	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f002 fd34 	bl	8003a78 <memset>
  if(hspi->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d129      	bne.n	800106e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_SPI_MspInit+0x84>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_SPI_MspInit+0x84>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0149      	lsls	r1, r1, #5
 8001024:	430a      	orrs	r2, r1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_SPI_MspInit+0x84>)
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_SPI_MspInit+0x84>)
 800102e:	2101      	movs	r1, #1
 8001030:	430a      	orrs	r2, r1
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_SPI_MspInit+0x84>)
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2201      	movs	r2, #1
 800103a:	4013      	ands	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001040:	0021      	movs	r1, r4
 8001042:	187b      	adds	r3, r7, r1
 8001044:	22a0      	movs	r2, #160	; 0xa0
 8001046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2202      	movs	r2, #2
 800104c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2203      	movs	r2, #3
 8001058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	187a      	adds	r2, r7, r1
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f000 f9eb 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b009      	add	sp, #36	; 0x24
 8001074:	bd90      	pop	{r4, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40013000 	.word	0x40013000
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	240c      	movs	r4, #12
 800108a:	193b      	adds	r3, r7, r4
 800108c:	0018      	movs	r0, r3
 800108e:	2314      	movs	r3, #20
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f002 fcf0 	bl	8003a78 <memset>
  if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d128      	bne.n	80010f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_UART_MspInit+0x80>)
 80010a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_UART_MspInit+0x80>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0289      	lsls	r1, r1, #10
 80010ac:	430a      	orrs	r2, r1
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_UART_MspInit+0x80>)
 80010b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0x80>)
 80010b6:	2102      	movs	r1, #2
 80010b8:	430a      	orrs	r2, r1
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_UART_MspInit+0x80>)
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	0021      	movs	r1, r4
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	22c0      	movs	r2, #192	; 0xc0
 80010ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2202      	movs	r2, #2
 80010d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2203      	movs	r2, #3
 80010e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_UART_MspInit+0x84>)
 80010ec:	0019      	movs	r1, r3
 80010ee:	0010      	movs	r0, r2
 80010f0:	f000 f9a8 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b009      	add	sp, #36	; 0x24
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	40004400 	.word	0x40004400
 8001100:	40021000 	.word	0x40021000
 8001104:	50000400 	.word	0x50000400

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f890 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fb0c 	bl	800175c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001156:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0b      	ldr	r4, [pc, #44]	; (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800117e:	f7ff ffe4 	bl	800114a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f002 fc55 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fce1 	bl	8000b4c <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
   ldr   r0, =_estack
 800118c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001198:	08003b5c 	.word	0x08003b5c
  ldr r2, =_sbss
 800119c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a0:	20000168 	.word	0x20000168

080011a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_COMP_IRQHandler>
	...

080011a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_Init+0x3c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Init+0x3c>)
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f811 	bl	80011e8 <HAL_InitTick>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e001      	b.n	80011d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d2:	f7ff feb9 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_InitTick+0x5c>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	0019      	movs	r1, r3
 80011fa:	23fa      	movs	r3, #250	; 0xfa
 80011fc:	0098      	lsls	r0, r3, #2
 80011fe:	f7fe ff83 	bl	8000108 <__udivsi3>
 8001202:	0003      	movs	r3, r0
 8001204:	0019      	movs	r1, r3
 8001206:	0020      	movs	r0, r4
 8001208:	f7fe ff7e 	bl	8000108 <__udivsi3>
 800120c:	0003      	movs	r3, r0
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f90b 	bl	800142a <HAL_SYSTICK_Config>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e00f      	b.n	800123c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d80b      	bhi.n	800123a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	2200      	movs	r2, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f8d8 	bl	80013e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_InitTick+0x64>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b003      	add	sp, #12
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	18d2      	adds	r2, r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000008 	.word	0x20000008
 8001270:	20000164 	.word	0x20000164

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000164 	.word	0x20000164

08001288 <__NVIC_EnableIRQ>:
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	d809      	bhi.n	80012b0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	001a      	movs	r2, r3
 80012a2:	231f      	movs	r3, #31
 80012a4:	401a      	ands	r2, r3
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_EnableIRQ+0x30>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d828      	bhi.n	8001324 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <__NVIC_SetPriority+0xd4>)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	33c0      	adds	r3, #192	; 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	589b      	ldr	r3, [r3, r2]
 80012e2:	1dfa      	adds	r2, r7, #7
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	0011      	movs	r1, r2
 80012e8:	2203      	movs	r2, #3
 80012ea:	400a      	ands	r2, r1
 80012ec:	00d2      	lsls	r2, r2, #3
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	401a      	ands	r2, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	2303      	movs	r3, #3
 800130a:	4003      	ands	r3, r0
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <__NVIC_SetPriority+0xd4>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	33c0      	adds	r3, #192	; 0xc0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	501a      	str	r2, [r3, r0]
}
 8001322:	e031      	b.n	8001388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0019      	movs	r1, r3
 800132c:	230f      	movs	r3, #15
 800132e:	400b      	ands	r3, r1
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3306      	adds	r3, #6
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	0011      	movs	r1, r2
 8001344:	2203      	movs	r2, #3
 8001346:	400a      	ands	r2, r1
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	401a      	ands	r2, r3
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	2303      	movs	r3, #3
 8001366:	4003      	ands	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <__NVIC_SetPriority+0xd8>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	001c      	movs	r4, r3
 8001374:	230f      	movs	r3, #15
 8001376:	4023      	ands	r3, r4
 8001378:	3b08      	subs	r3, #8
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	3306      	adds	r3, #6
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	18c3      	adds	r3, r0, r3
 8001384:	3304      	adds	r3, #4
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b003      	add	sp, #12
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <SysTick_Config>:
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	045b      	lsls	r3, r3, #17
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d301      	bcc.n	80013b0 <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 80013ac:	2301      	movs	r3, #1
 80013ae:	e010      	b.n	80013d2 <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SysTick_Config+0x44>)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	3a01      	subs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b8:	2301      	movs	r3, #1
 80013ba:	425b      	negs	r3, r3
 80013bc:	2103      	movs	r1, #3
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff ff7c 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x44>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x44>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	210f      	movs	r1, #15
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b004      	add	sp, #16
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	0002      	movs	r2, r0
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ff33 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ffaf 	bl	8001398 <SysTick_Config>
 800143a:	0003      	movs	r3, r0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800145a:	e149      	b.n	80016f0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <HAL_GPIO_Init+0x30>
 8001472:	e13a      	b.n	80016ea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00b      	beq.n	8001494 <HAL_GPIO_Init+0x50>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001488:	2b11      	cmp	r3, #17
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b12      	cmp	r3, #18
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	409a      	lsls	r2, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	2201      	movs	r2, #1
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0xf2>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	58d3      	ldr	r3, [r2, r3]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2207      	movs	r2, #7
 8001548:	4013      	ands	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2107      	movs	r1, #7
 8001562:	400b      	ands	r3, r1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	6939      	ldr	r1, [r7, #16]
 800157c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	401a      	ands	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	055b      	lsls	r3, r3, #21
 80015ba:	4013      	ands	r3, r2
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x17c>
 80015be:	e094      	b.n	80016ea <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x2c8>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	589b      	ldr	r3, [r3, r2]
 80015d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2203      	movs	r2, #3
 80015de:	4013      	ands	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	23a0      	movs	r3, #160	; 0xa0
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x1de>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a44      	ldr	r2, [pc, #272]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x1da>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a43      	ldr	r2, [pc, #268]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x1d6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_GPIO_Init+0x2d4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x1d2>
 8001612:	2305      	movs	r3, #5
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x1e0>
 8001616:	2306      	movs	r3, #6
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x1e0>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x1e0>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x1e0>
 8001622:	2300      	movs	r3, #0
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	2103      	movs	r1, #3
 8001628:	400a      	ands	r2, r1
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2c8>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4013      	ands	r3, r2
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_GPIO_Init+0x2d8>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	035b      	lsls	r3, r3, #13
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x2d8>)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_GPIO_Init+0x2d8>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	039b      	lsls	r3, r3, #14
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_GPIO_Init+0x2d8>)
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	1e13      	subs	r3, r2, #0
 80016fa:	d000      	beq.n	80016fe <HAL_GPIO_Init+0x2ba>
 80016fc:	e6ae      	b.n	800145c <HAL_GPIO_Init+0x18>
  }
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	50000400 	.word	0x50000400
 8001714:	50000800 	.word	0x50000800
 8001718:	50001c00 	.word	0x50001c00
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	0008      	movs	r0, r1
 800172a:	0011      	movs	r1, r2
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	1c02      	adds	r2, r0, #0
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	1c7b      	adds	r3, r7, #1
 8001734:	1c0a      	adds	r2, r1, #0
 8001736:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001738:	1c7b      	adds	r3, r7, #1
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001740:	1cbb      	adds	r3, r7, #2
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	1dba      	adds	r2, r7, #6
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	4013      	ands	r3, r2
 8001772:	d008      	beq.n	8001786 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001776:	1dba      	adds	r2, r7, #6
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800177c:	1dbb      	adds	r3, r7, #6
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff f9cd 	bl	8000b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e082      	b.n	80018ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2241      	movs	r2, #65	; 0x41
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2240      	movs	r2, #64	; 0x40
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fbd7 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2241      	movs	r2, #65	; 0x41
 80017c6:	2124      	movs	r1, #36	; 0x24
 80017c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_I2C_Init+0x120>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4931      	ldr	r1, [pc, #196]	; (80018b8 <HAL_I2C_Init+0x124>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0209      	lsls	r1, r1, #8
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	e007      	b.n	8001822 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2184      	movs	r1, #132	; 0x84
 800181c:	0209      	lsls	r1, r1, #8
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d104      	bne.n	8001834 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	491f      	ldr	r1, [pc, #124]	; (80018bc <HAL_I2C_Init+0x128>)
 8001840:	430a      	orrs	r2, r1
 8001842:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	491a      	ldr	r1, [pc, #104]	; (80018b8 <HAL_I2C_Init+0x124>)
 8001850:	400a      	ands	r2, r1
 8001852:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	431a      	orrs	r2, r3
 800185e:	0011      	movs	r1, r2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	021a      	lsls	r2, r3, #8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69d9      	ldr	r1, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1a      	ldr	r2, [r3, #32]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2241      	movs	r2, #65	; 0x41
 8001898:	2120      	movs	r1, #32
 800189a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2242      	movs	r2, #66	; 0x42
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	f0ffffff 	.word	0xf0ffffff
 80018b8:	ffff7fff 	.word	0xffff7fff
 80018bc:	02008000 	.word	0x02008000

080018c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	000c      	movs	r4, r1
 80018ca:	0010      	movs	r0, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	230a      	movs	r3, #10
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	1c22      	adds	r2, r4, #0
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	2308      	movs	r3, #8
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	1dbb      	adds	r3, r7, #6
 80018e0:	1c0a      	adds	r2, r1, #0
 80018e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2241      	movs	r2, #65	; 0x41
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d000      	beq.n	80018f2 <HAL_I2C_Mem_Write+0x32>
 80018f0:	e10c      	b.n	8001b0c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_I2C_Mem_Write+0x42>
 80018f8:	232c      	movs	r3, #44	; 0x2c
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ff      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2C_Mem_Write+0x5c>
 8001918:	2302      	movs	r3, #2
 800191a:	e0f8      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001924:	f7ff fca6 	bl	8001274 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	0219      	lsls	r1, r3, #8
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2319      	movs	r3, #25
 8001938:	2201      	movs	r2, #1
 800193a:	f000 fb0b 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0e3      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2241      	movs	r2, #65	; 0x41
 800194a:	2121      	movs	r1, #33	; 0x21
 800194c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2242      	movs	r2, #66	; 0x42
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	222c      	movs	r2, #44	; 0x2c
 8001966:	18ba      	adds	r2, r7, r2
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001972:	1dbb      	adds	r3, r7, #6
 8001974:	881c      	ldrh	r4, [r3, #0]
 8001976:	2308      	movs	r3, #8
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	230a      	movs	r3, #10
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	8819      	ldrh	r1, [r3, #0]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	0023      	movs	r3, r4
 800198e:	f000 f9f9 	bl	8001d84 <I2C_RequestMemoryWrite>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d005      	beq.n	80019a2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2240      	movs	r2, #64	; 0x40
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0b5      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	2bff      	cmp	r3, #255	; 0xff
 80019aa:	d911      	bls.n	80019d0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	22ff      	movs	r2, #255	; 0xff
 80019b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	045c      	lsls	r4, r3, #17
 80019bc:	230a      	movs	r3, #10
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	8819      	ldrh	r1, [r3, #0]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	0023      	movs	r3, r4
 80019ca:	f000 fbe3 	bl	8002194 <I2C_TransferConfig>
 80019ce:	e012      	b.n	80019f6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	049c      	lsls	r4, r3, #18
 80019e4:	230a      	movs	r3, #10
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	0023      	movs	r3, r4
 80019f2:	f000 fbcf 	bl	8002194 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 fae8 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e081      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03a      	beq.n	8001aba <HAL_I2C_Mem_Write+0x1fa>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d136      	bne.n	8001aba <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	0013      	movs	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	f000 fa7b 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e053      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2bff      	cmp	r3, #255	; 0xff
 8001a6e:	d911      	bls.n	8001a94 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	22ff      	movs	r2, #255	; 0xff
 8001a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	045c      	lsls	r4, r3, #17
 8001a80:	230a      	movs	r3, #10
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	8819      	ldrh	r1, [r3, #0]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	0023      	movs	r3, r4
 8001a8e:	f000 fb81 	bl	8002194 <I2C_TransferConfig>
 8001a92:	e012      	b.n	8001aba <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	049c      	lsls	r4, r3, #18
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	f000 fb6d 	bl	8002194 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d198      	bne.n	80019f6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fac0 	bl	8002050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01a      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	490b      	ldr	r1, [pc, #44]	; (8001b18 <HAL_I2C_Mem_Write+0x258>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2241      	movs	r2, #65	; 0x41
 8001af4:	2120      	movs	r1, #32
 8001af6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2242      	movs	r2, #66	; 0x42
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e000      	b.n	8001b0e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001b0c:	2302      	movs	r3, #2
  }
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b007      	add	sp, #28
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	fe00e800 	.word	0xfe00e800

08001b1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	000c      	movs	r4, r1
 8001b26:	0010      	movs	r0, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	1c22      	adds	r2, r4, #0
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	2308      	movs	r3, #8
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	1c02      	adds	r2, r0, #0
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	1dbb      	adds	r3, r7, #6
 8001b3c:	1c0a      	adds	r2, r1, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2241      	movs	r2, #65	; 0x41
 8001b44:	5c9b      	ldrb	r3, [r3, r2]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d000      	beq.n	8001b4e <HAL_I2C_Mem_Read+0x32>
 8001b4c:	e110      	b.n	8001d70 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_I2C_Mem_Read+0x42>
 8001b54:	232c      	movs	r3, #44	; 0x2c
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e103      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Mem_Read+0x5c>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0fc      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff fb78 	bl	8001274 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	0219      	lsls	r1, r3, #8
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2319      	movs	r3, #25
 8001b94:	2201      	movs	r2, #1
 8001b96:	f000 f9dd 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0e7      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2241      	movs	r2, #65	; 0x41
 8001ba6:	2122      	movs	r1, #34	; 0x22
 8001ba8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2242      	movs	r2, #66	; 0x42
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	222c      	movs	r2, #44	; 0x2c
 8001bc2:	18ba      	adds	r2, r7, r2
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bce:	1dbb      	adds	r3, r7, #6
 8001bd0:	881c      	ldrh	r4, [r3, #0]
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	230a      	movs	r3, #10
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	0023      	movs	r3, r4
 8001bea:	f000 f92f 	bl	8001e4c <I2C_RequestMemoryRead>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0b9      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2bff      	cmp	r3, #255	; 0xff
 8001c06:	d911      	bls.n	8001c2c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	22ff      	movs	r2, #255	; 0xff
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	045c      	lsls	r4, r3, #17
 8001c18:	230a      	movs	r3, #10
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	8819      	ldrh	r1, [r3, #0]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_I2C_Mem_Read+0x260>)
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	0023      	movs	r3, r4
 8001c26:	f000 fab5 	bl	8002194 <I2C_TransferConfig>
 8001c2a:	e012      	b.n	8001c52 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	049c      	lsls	r4, r3, #18
 8001c40:	230a      	movs	r3, #10
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	8819      	ldrh	r1, [r3, #0]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_I2C_Mem_Read+0x260>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	0023      	movs	r3, r4
 8001c4e:	f000 faa1 	bl	8002194 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	0013      	movs	r3, r2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2104      	movs	r1, #4
 8001c60:	f000 f978 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e082      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03a      	beq.n	8001d1e <HAL_I2C_Mem_Read+0x202>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d136      	bne.n	8001d1e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	f000 f949 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e053      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2bff      	cmp	r3, #255	; 0xff
 8001cd2:	d911      	bls.n	8001cf8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	045c      	lsls	r4, r3, #17
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	8819      	ldrh	r1, [r3, #0]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	0023      	movs	r3, r4
 8001cf2:	f000 fa4f 	bl	8002194 <I2C_TransferConfig>
 8001cf6:	e012      	b.n	8001d1e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	049c      	lsls	r4, r3, #18
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	8819      	ldrh	r1, [r3, #0]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	0023      	movs	r3, r4
 8001d1a:	f000 fa3b 	bl	8002194 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d194      	bne.n	8001c52 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f98e 	bl	8002050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d34:	1e03      	subs	r3, r0, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e01a      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2220      	movs	r2, #32
 8001d42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <HAL_I2C_Mem_Read+0x264>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2241      	movs	r2, #65	; 0x41
 8001d58:	2120      	movs	r1, #32
 8001d5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2242      	movs	r2, #66	; 0x42
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b007      	add	sp, #28
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	80002400 	.word	0x80002400
 8001d80:	fe00e800 	.word	0xfe00e800

08001d84 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	250a      	movs	r5, #10
 8001d94:	197b      	adds	r3, r7, r5
 8001d96:	1c22      	adds	r2, r4, #0
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	1c0a      	adds	r2, r1, #0
 8001da6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	045c      	lsls	r4, r3, #17
 8001db2:	197b      	adds	r3, r7, r5
 8001db4:	8819      	ldrh	r1, [r3, #0]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <I2C_RequestMemoryWrite+0xc4>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	0023      	movs	r3, r4
 8001dbe:	f000 f9e9 	bl	8002194 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 f902 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e033      	b.n	8001e3e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd6:	1dbb      	adds	r3, r7, #6
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dde:	2308      	movs	r3, #8
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
 8001dec:	e019      	b.n	8001e22 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dee:	2308      	movs	r3, #8
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 f8e3 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e0c:	1e03      	subs	r3, r0, #0
 8001e0e:	d001      	beq.n	8001e14 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e014      	b.n	8001e3e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e14:	2308      	movs	r3, #8
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e22:	6a3a      	ldr	r2, [r7, #32]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	f000 f890 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d001      	beq.n	8001e3c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	80002000 	.word	0x80002000

08001e4c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	000c      	movs	r4, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	250a      	movs	r5, #10
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	1c22      	adds	r2, r4, #0
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	2308      	movs	r3, #8
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <I2C_RequestMemoryRead+0xc0>)
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	f000 f987 	bl	8002194 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f8a0 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e033      	b.n	8001f02 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb0:	e019      	b.n	8001ee6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	6a39      	ldr	r1, [r7, #32]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f881 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e014      	b.n	8001f02 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed8:	2308      	movs	r3, #8
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee6:	6a3a      	ldr	r2, [r7, #32]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	0013      	movs	r3, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	f000 f82e 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d001      	beq.n	8001f00 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	80002000 	.word	0x80002000

08001f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d103      	bne.n	8001f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d007      	beq.n	8001f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
  }
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f64:	e021      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	d01e      	beq.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7ff f982 	bl	8001274 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d113      	bne.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	2220      	movs	r2, #32
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2241      	movs	r2, #65	; 0x41
 8001f92:	2120      	movs	r1, #32
 8001f94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2242      	movs	r2, #66	; 0x42
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	425a      	negs	r2, r3
 8001fba:	4153      	adcs	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d0ce      	beq.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fde:	e02b      	b.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f86e 	bl	80020c8 <I2C_IsAcknowledgeFailed>
 8001fec:	1e03      	subs	r3, r0, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e029      	b.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	d01e      	beq.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffa:	f7ff f93b 	bl	8001274 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	429a      	cmp	r2, r3
 8002008:	d302      	bcc.n	8002010 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d113      	bne.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	2220      	movs	r2, #32
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2241      	movs	r2, #65	; 0x41
 8002020:	2120      	movs	r1, #32
 8002022:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2242      	movs	r2, #66	; 0x42
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e007      	b.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d1cc      	bne.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205c:	e028      	b.n	80020b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f82f 	bl	80020c8 <I2C_IsAcknowledgeFailed>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e026      	b.n	80020c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7ff f8ff 	bl	8001274 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	2220      	movs	r2, #32
 800208e:	431a      	orrs	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2241      	movs	r2, #65	; 0x41
 8002098:	2120      	movs	r1, #32
 800209a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2242      	movs	r2, #66	; 0x42
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e007      	b.n	80020c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d1cf      	bne.n	800205e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2210      	movs	r2, #16
 80020dc:	4013      	ands	r3, r2
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d151      	bne.n	8002186 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e2:	e021      	b.n	8002128 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3301      	adds	r3, #1
 80020e8:	d01e      	beq.n	8002128 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7ff f8c3 	bl	8001274 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <I2C_IsAcknowledgeFailed+0x38>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d113      	bne.n	8002128 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	2220      	movs	r2, #32
 8002106:	431a      	orrs	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2241      	movs	r2, #65	; 0x41
 8002110:	2120      	movs	r1, #32
 8002112:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2242      	movs	r2, #66	; 0x42
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e02f      	b.n	8002188 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2220      	movs	r2, #32
 8002130:	4013      	ands	r3, r2
 8002132:	2b20      	cmp	r3, #32
 8002134:	d1d6      	bne.n	80020e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fee1 	bl	8001f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <I2C_IsAcknowledgeFailed+0xc8>)
 800215a:	400a      	ands	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	2204      	movs	r2, #4
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2241      	movs	r2, #65	; 0x41
 800216e:	2120      	movs	r1, #32
 8002170:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	0008      	movs	r0, r1
 800219e:	0011      	movs	r1, r2
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	240a      	movs	r4, #10
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	1c02      	adds	r2, r0, #0
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	2009      	movs	r0, #9
 80021ac:	183b      	adds	r3, r7, r0
 80021ae:	1c0a      	adds	r2, r1, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	0d51      	lsrs	r1, r2, #21
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	00d2      	lsls	r2, r2, #3
 80021c0:	400a      	ands	r2, r1
 80021c2:	490e      	ldr	r1, [pc, #56]	; (80021fc <I2C_TransferConfig+0x68>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	43d2      	mvns	r2, r2
 80021c8:	401a      	ands	r2, r3
 80021ca:	0011      	movs	r1, r2
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	059b      	lsls	r3, r3, #22
 80021d2:	0d9a      	lsrs	r2, r3, #22
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	0418      	lsls	r0, r3, #16
 80021da:	23ff      	movs	r3, #255	; 0xff
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	4003      	ands	r3, r0
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b005      	add	sp, #20
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	03ff63ff 	.word	0x03ff63ff

08002200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2241      	movs	r2, #65	; 0x41
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d138      	bne.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002220:	2302      	movs	r3, #2
 8002222:	e032      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2241      	movs	r2, #65	; 0x41
 8002230:	2124      	movs	r1, #36	; 0x24
 8002232:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	438a      	bics	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4911      	ldr	r1, [pc, #68]	; (8002294 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2120      	movs	r1, #32
 800227a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	ffffefff 	.word	0xffffefff

08002298 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d139      	bne.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e033      	b.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2241      	movs	r2, #65	; 0x41
 80022c8:	2124      	movs	r1, #36	; 0x24
 80022ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	2120      	movs	r1, #32
 8002314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}
 800232c:	fffff0ff 	.word	0xfffff0ff

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	f000 fb6c 	bl	8002a1c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002344:	4bc8      	ldr	r3, [pc, #800]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	220c      	movs	r2, #12
 800234a:	4013      	ands	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234e:	4bc6      	ldr	r3, [pc, #792]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	025b      	lsls	r3, r3, #9
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x36>
 8002364:	e07d      	b.n	8002462 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d007      	beq.n	800237c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d112      	bne.n	8002398 <HAL_RCC_OscConfig+0x68>
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	025b      	lsls	r3, r3, #9
 8002378:	429a      	cmp	r2, r3
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4bba      	ldr	r3, [pc, #744]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	d100      	bne.n	800238a <HAL_RCC_OscConfig+0x5a>
 8002388:	e06a      	b.n	8002460 <HAL_RCC_OscConfig+0x130>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d166      	bne.n	8002460 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	f000 fb42 	bl	8002a1c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x84>
 80023a4:	4bb0      	ldr	r3, [pc, #704]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4baf      	ldr	r3, [pc, #700]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e027      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	23a0      	movs	r3, #160	; 0xa0
 80023ba:	02db      	lsls	r3, r3, #11
 80023bc:	429a      	cmp	r2, r3
 80023be:	d10e      	bne.n	80023de <HAL_RCC_OscConfig+0xae>
 80023c0:	4ba9      	ldr	r3, [pc, #676]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4ba8      	ldr	r3, [pc, #672]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	02c9      	lsls	r1, r1, #11
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	4ba6      	ldr	r3, [pc, #664]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4ba5      	ldr	r3, [pc, #660]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0249      	lsls	r1, r1, #9
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e012      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023de:	4ba2      	ldr	r3, [pc, #648]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4ba1      	ldr	r3, [pc, #644]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023e4:	49a1      	ldr	r1, [pc, #644]	; (800266c <HAL_RCC_OscConfig+0x33c>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4b9f      	ldr	r3, [pc, #636]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	4013      	ands	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4b9b      	ldr	r3, [pc, #620]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b9a      	ldr	r3, [pc, #616]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80023fe:	499c      	ldr	r1, [pc, #624]	; (8002670 <HAL_RCC_OscConfig+0x340>)
 8002400:	400a      	ands	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d014      	beq.n	8002436 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe ff32 	bl	8001274 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002416:	f7fe ff2d 	bl	8001274 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e2f9      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002428:	4b8f      	ldr	r3, [pc, #572]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	029b      	lsls	r3, r3, #10
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0xe6>
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe ff1d 	bl	8001274 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe ff18 	bl	8001274 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e2e4      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	4013      	ands	r3, r2
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x110>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_RCC_OscConfig+0x13e>
 800246c:	e099      	b.n	80025a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	2220      	movs	r2, #32
 8002478:	4013      	ands	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800247c:	4b7a      	ldr	r3, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b79      	ldr	r3, [pc, #484]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002482:	2120      	movs	r1, #32
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	2220      	movs	r2, #32
 800248c:	4393      	bics	r3, r2
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b04      	cmp	r3, #4
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d13e      	bne.n	800251a <HAL_RCC_OscConfig+0x1ea>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d13b      	bne.n	800251a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80024a2:	4b71      	ldr	r3, [pc, #452]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_RCC_OscConfig+0x186>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e2b2      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x344>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	021a      	lsls	r2, r3, #8
 80024c6:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2209      	movs	r2, #9
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	4b64      	ldr	r3, [pc, #400]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 fbeb 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80024e2:	0001      	movs	r1, r0
 80024e4:	4b60      	ldr	r3, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	220f      	movs	r2, #15
 80024ec:	4013      	ands	r3, r2
 80024ee:	4a62      	ldr	r2, [pc, #392]	; (8002678 <HAL_RCC_OscConfig+0x348>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	000a      	movs	r2, r1
 80024f4:	40da      	lsrs	r2, r3
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x34c>)
 80024f8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x350>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2513      	movs	r5, #19
 8002500:	197c      	adds	r4, r7, r5
 8002502:	0018      	movs	r0, r3
 8002504:	f7fe fe70 	bl	80011e8 <HAL_InitTick>
 8002508:	0003      	movs	r3, r0
 800250a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800250c:	197b      	adds	r3, r7, r5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d046      	beq.n	80025a2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002514:	197b      	adds	r3, r7, r5
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	e280      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d027      	beq.n	8002570 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2209      	movs	r2, #9
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fe9f 	bl	8001274 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe fe9a 	bl	8001274 <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e266      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d0f1      	beq.n	800253c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_RCC_OscConfig+0x344>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fe7a 	bl	8001274 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7fe fe75 	bl	8001274 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e241      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d1f1      	bne.n	8002586 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2210      	movs	r2, #16
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_RCC_OscConfig+0x27e>
 80025ac:	e0a1      	b.n	80026f2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d140      	bne.n	8002636 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x29c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e227      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <HAL_RCC_OscConfig+0x354>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	0a19      	lsrs	r1, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	061a      	lsls	r2, r3, #24
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	0b5b      	lsrs	r3, r3, #13
 80025fa:	3301      	adds	r3, #1
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0212      	lsls	r2, r2, #8
 8002600:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	210f      	movs	r1, #15
 800260a:	400b      	ands	r3, r1
 800260c:	491a      	ldr	r1, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x348>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_OscConfig+0x34c>)
 8002614:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x350>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2513      	movs	r5, #19
 800261c:	197c      	adds	r4, r7, r5
 800261e:	0018      	movs	r0, r3
 8002620:	f7fe fde2 	bl	80011e8 <HAL_InitTick>
 8002624:	0003      	movs	r3, r0
 8002626:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002628:	197b      	adds	r3, r7, r5
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d060      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002630:	197b      	adds	r3, r7, r5
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	e1f2      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03f      	beq.n	80026be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0049      	lsls	r1, r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fe12 	bl	8001274 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002654:	e018      	b.n	8002688 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002656:	f7fe fe0d 	bl	8001274 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d911      	bls.n	8002688 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1d9      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
 8002668:	40021000 	.word	0x40021000
 800266c:	fffeffff 	.word	0xfffeffff
 8002670:	fffbffff 	.word	0xfffbffff
 8002674:	ffffe0ff 	.word	0xffffe0ff
 8002678:	08003ae0 	.word	0x08003ae0
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004
 8002684:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002688:	4bc9      	ldr	r3, [pc, #804]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d0e0      	beq.n	8002656 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002694:	4bc6      	ldr	r3, [pc, #792]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4ac6      	ldr	r2, [pc, #792]	; (80029b4 <HAL_RCC_OscConfig+0x684>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4bc3      	ldr	r3, [pc, #780]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a8:	4bc1      	ldr	r3, [pc, #772]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	0a19      	lsrs	r1, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	061a      	lsls	r2, r3, #24
 80026b6:	4bbe      	ldr	r3, [pc, #760]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	e019      	b.n	80026f2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026be:	4bbc      	ldr	r3, [pc, #752]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4bbb      	ldr	r3, [pc, #748]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026c4:	49bc      	ldr	r1, [pc, #752]	; (80029b8 <HAL_RCC_OscConfig+0x688>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe fdd3 	bl	8001274 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d4:	f7fe fdce 	bl	8001274 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e19a      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026e6:	4bb2      	ldr	r3, [pc, #712]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2208      	movs	r2, #8
 80026f8:	4013      	ands	r3, r2
 80026fa:	d036      	beq.n	800276a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d019      	beq.n	8002738 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002704:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002708:	4ba9      	ldr	r3, [pc, #676]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800270a:	2101      	movs	r1, #1
 800270c:	430a      	orrs	r2, r1
 800270e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fdb0 	bl	8001274 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271a:	f7fe fdab 	bl	8001274 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e177      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272c:	4ba0      	ldr	r3, [pc, #640]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d0f1      	beq.n	800271a <HAL_RCC_OscConfig+0x3ea>
 8002736:	e018      	b.n	800276a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b9d      	ldr	r3, [pc, #628]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800273a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273c:	4b9c      	ldr	r3, [pc, #624]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800273e:	2101      	movs	r1, #1
 8002740:	438a      	bics	r2, r1
 8002742:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7fe fd96 	bl	8001274 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fd91 	bl	8001274 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e15d      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002760:	4b93      	ldr	r3, [pc, #588]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d1f1      	bne.n	800274e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2204      	movs	r2, #4
 8002770:	4013      	ands	r3, r2
 8002772:	d100      	bne.n	8002776 <HAL_RCC_OscConfig+0x446>
 8002774:	e0ae      	b.n	80028d4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2023      	movs	r0, #35	; 0x23
 8002778:	183b      	adds	r3, r7, r0
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	055b      	lsls	r3, r3, #21
 8002786:	4013      	ands	r3, r2
 8002788:	d109      	bne.n	800279e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b89      	ldr	r3, [pc, #548]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800278c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0549      	lsls	r1, r1, #21
 8002794:	430a      	orrs	r2, r1
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x68c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	d11a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_RCC_OscConfig+0x68c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x68c>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0049      	lsls	r1, r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b8:	f7fe fd5c 	bl	8001274 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fd57 	bl	8001274 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e123      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_RCC_OscConfig+0x68c>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x4cc>
 80027ec:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80027ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0049      	lsls	r1, r1, #1
 80027f6:	430a      	orrs	r2, r1
 80027f8:	651a      	str	r2, [r3, #80]	; 0x50
 80027fa:	e031      	b.n	8002860 <HAL_RCC_OscConfig+0x530>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x4ee>
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002808:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800280a:	496b      	ldr	r1, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x688>)
 800280c:	400a      	ands	r2, r1
 800280e:	651a      	str	r2, [r3, #80]	; 0x50
 8002810:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002816:	496a      	ldr	r1, [pc, #424]	; (80029c0 <HAL_RCC_OscConfig+0x690>)
 8002818:	400a      	ands	r2, r1
 800281a:	651a      	str	r2, [r3, #80]	; 0x50
 800281c:	e020      	b.n	8002860 <HAL_RCC_OscConfig+0x530>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	23a0      	movs	r3, #160	; 0xa0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	429a      	cmp	r2, r3
 8002828:	d10e      	bne.n	8002848 <HAL_RCC_OscConfig+0x518>
 800282a:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800282c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282e:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	00c9      	lsls	r1, r1, #3
 8002834:	430a      	orrs	r2, r1
 8002836:	651a      	str	r2, [r3, #80]	; 0x50
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800283a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	0049      	lsls	r1, r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	651a      	str	r2, [r3, #80]	; 0x50
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x530>
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800284a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800284e:	495a      	ldr	r1, [pc, #360]	; (80029b8 <HAL_RCC_OscConfig+0x688>)
 8002850:	400a      	ands	r2, r1
 8002852:	651a      	str	r2, [r3, #80]	; 0x50
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002858:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800285a:	4959      	ldr	r1, [pc, #356]	; (80029c0 <HAL_RCC_OscConfig+0x690>)
 800285c:	400a      	ands	r2, r1
 800285e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe fd04 	bl	8001274 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fcff 	bl	8001274 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x694>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0ca      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d0ef      	beq.n	8002872 <HAL_RCC_OscConfig+0x542>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7fe fcee 	bl	8001274 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe fce9 	bl	8001274 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_RCC_OscConfig+0x694>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0b4      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80028b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d1ef      	bne.n	800289e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028be:	2323      	movs	r3, #35	; 0x23
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80028ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028cc:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80028ce:	493e      	ldr	r1, [pc, #248]	; (80029c8 <HAL_RCC_OscConfig+0x698>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x5ae>
 80028dc:	e09d      	b.n	8002a1a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x5b6>
 80028e4:	e076      	b.n	80029d4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d145      	bne.n	800297a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80028f4:	4935      	ldr	r1, [pc, #212]	; (80029cc <HAL_RCC_OscConfig+0x69c>)
 80028f6:	400a      	ands	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe fcbb 	bl	8001274 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fcb6 	bl	8001274 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e082      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	049b      	lsls	r3, r3, #18
 800291e:	4013      	ands	r3, r2
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x6a0>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	431a      	orrs	r2, r3
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800293e:	430a      	orrs	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	0449      	lsls	r1, r1, #17
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fc90 	bl	8001274 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fc8b 	bl	8001274 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e057      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	049b      	lsls	r3, r3, #18
 8002974:	4013      	ands	r3, r2
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x62a>
 8002978:	e04f      	b.n	8002a1a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x69c>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe fc75 	bl	8001274 <HAL_GetTick>
 800298a:	0003      	movs	r3, r0
 800298c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fc70 	bl	8001274 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e03c      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029a2:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_OscConfig+0x680>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	049b      	lsls	r3, r3, #18
 80029aa:	4013      	ands	r3, r2
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x660>
 80029ae:	e034      	b.n	8002a1a <HAL_RCC_OscConfig+0x6ea>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	ffff1fff 	.word	0xffff1fff
 80029b8:	fffffeff 	.word	0xfffffeff
 80029bc:	40007000 	.word	0x40007000
 80029c0:	fffffbff 	.word	0xfffffbff
 80029c4:	00001388 	.word	0x00001388
 80029c8:	efffffff 	.word	0xefffffff
 80029cc:	feffffff 	.word	0xfeffffff
 80029d0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x6f4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	025b      	lsls	r3, r3, #9
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	23f0      	movs	r3, #240	; 0xf0
 80029fa:	039b      	lsls	r3, r3, #14
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	23c0      	movs	r3, #192	; 0xc0
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b00a      	add	sp, #40	; 0x28
 8002a22:	bdb0      	pop	{r4, r5, r7, pc}
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e128      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b96      	ldr	r3, [pc, #600]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d91e      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b93      	ldr	r3, [pc, #588]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fc0a 	bl	8001274 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	e009      	b.n	8002a7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a66:	f7fe fc05 	bl	8001274 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e109      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b87      	ldr	r3, [pc, #540]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a92:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	22f0      	movs	r2, #240	; 0xf0
 8002a98:	4393      	bics	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b7f      	ldr	r3, [pc, #508]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
 8002ab0:	e089      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aba:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d120      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e1      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad2:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	049b      	lsls	r3, r3, #18
 8002ada:	4013      	ands	r3, r2
 8002adc:	d114      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0d5      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d109      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ca      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002af8:	4b69      	ldr	r3, [pc, #420]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0c2      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	4393      	bics	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fbaa 	bl	8001274 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d111      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b2c:	e009      	b.n	8002b42 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2e:	f7fe fba1 	bl	8001274 <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0a5      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	220c      	movs	r2, #12
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d1ef      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x106>
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b58:	e009      	b.n	8002b6e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5a:	f7fe fb8b 	bl	8001274 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e08f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	220c      	movs	r2, #12
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x132>
 8002b7a:	e024      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d11b      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b84:	e009      	b.n	8002b9a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b86:	f7fe fb75 	bl	8001274 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	4a42      	ldr	r2, [pc, #264]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e079      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d1ef      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x15e>
 8002ba6:	e00e      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fb64 	bl	8001274 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e068      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d21e      	bcs.n	8002c12 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002be6:	f7fe fb45 	bl	8001274 <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	e009      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fb40 	bl	8001274 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <HAL_RCC_ClockConfig+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e044      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x27c>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2208      	movs	r2, #8
 8002c36:	4013      	ands	r3, r2
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_RCC_ClockConfig+0x280>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00da      	lsls	r2, r3, #3
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c50:	f000 f832 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c54:	0001      	movs	r1, r0
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_RCC_ClockConfig+0x278>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	4013      	ands	r3, r2
 8002c60:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_RCC_ClockConfig+0x284>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	000a      	movs	r2, r1
 8002c66:	40da      	lsrs	r2, r3
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_RCC_ClockConfig+0x288>)
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_ClockConfig+0x28c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	250b      	movs	r5, #11
 8002c72:	197c      	adds	r4, r7, r5
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7fe fab7 	bl	80011e8 <HAL_InitTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c7e:	197b      	adds	r3, r7, r5
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c86:	197b      	adds	r3, r7, r5
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	00001388 	.word	0x00001388
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	fffff8ff 	.word	0xfffff8ff
 8002ca8:	ffffc7ff 	.word	0xffffc7ff
 8002cac:	08003ae0 	.word	0x08003ae0
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b08e      	sub	sp, #56	; 0x38
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d014      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cce:	d900      	bls.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8002cd0:	e07b      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x112>
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x24>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cda:	e076      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cdc:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d002      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002cea:	e07c      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002cec:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cf0:	e079      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x144>)
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cf6:	e076      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	0c9a      	lsrs	r2, r3, #18
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	401a      	ands	r2, r3
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x148>)
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	0d9a      	lsrs	r2, r3, #22
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	3301      	adds	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d01a      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	4a35      	ldr	r2, [pc, #212]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x144>)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	69b8      	ldr	r0, [r7, #24]
 8002d2c:	69f9      	ldr	r1, [r7, #28]
 8002d2e:	f7fd fa97 	bl	8000260 <__aeabi_lmul>
 8002d32:	0002      	movs	r2, r0
 8002d34:	000b      	movs	r3, r1
 8002d36:	0010      	movs	r0, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f7fd fa6b 	bl	8000220 <__aeabi_uldivmod>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	0013      	movs	r3, r2
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
 8002d52:	e037      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d01a      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	68b8      	ldr	r0, [r7, #8]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	f7fd fa77 	bl	8000260 <__aeabi_lmul>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f7fd fa4b 	bl	8000220 <__aeabi_uldivmod>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	000b      	movs	r3, r1
 8002d8e:	0013      	movs	r3, r2
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
 8002d92:	e017      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	0018      	movs	r0, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f7fd fa5e 	bl	8000260 <__aeabi_lmul>
 8002da4:	0002      	movs	r2, r0
 8002da6:	000b      	movs	r3, r1
 8002da8:	0010      	movs	r0, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	001c      	movs	r4, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	001d      	movs	r5, r3
 8002db4:	0022      	movs	r2, r4
 8002db6:	002b      	movs	r3, r5
 8002db8:	f7fd fa32 	bl	8000220 <__aeabi_uldivmod>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	000b      	movs	r3, r1
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dc8:	e00d      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0b5b      	lsrs	r3, r3, #13
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	0212      	lsls	r2, r2, #8
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002de4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b00e      	add	sp, #56	; 0x38
 8002dee:	bdb0      	pop	{r4, r5, r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	003d0900 	.word	0x003d0900
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	08003af8 	.word	0x08003af8

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff2 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e20:	0001      	movs	r1, r0
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	2207      	movs	r2, #7
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	40d9      	lsrs	r1, r3
 8002e32:	000b      	movs	r3, r1
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08003af0 	.word	0x08003af0

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e48:	f7ff ffdc 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e4c:	0001      	movs	r1, r0
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0adb      	lsrs	r3, r3, #11
 8002e54:	2207      	movs	r2, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	40d9      	lsrs	r1, r3
 8002e5e:	000b      	movs	r3, r1
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08003af0 	.word	0x08003af0

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e78:	2017      	movs	r0, #23
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2220      	movs	r2, #32
 8002e86:	4013      	ands	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002e8a:	e0c2      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8c:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	055b      	lsls	r3, r3, #21
 8002e94:	4013      	ands	r3, r2
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9c:	4b7d      	ldr	r3, [pc, #500]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0549      	lsls	r1, r1, #21
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b7a      	ldr	r3, [pc, #488]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d11a      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb8:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	0049      	lsls	r1, r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe f9d5 	bl	8001274 <HAL_GetTick>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe f9d0 	bl	8001274 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0d4      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002eee:	4b69      	ldr	r3, [pc, #420]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	039b      	lsls	r3, r3, #14
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	23c0      	movs	r3, #192	; 0xc0
 8002f00:	039b      	lsls	r3, r3, #14
 8002f02:	4013      	ands	r3, r2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d013      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	401a      	ands	r2, r3
 8002f14:	23c0      	movs	r3, #192	; 0xc0
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	401a      	ands	r2, r3
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0ac      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f32:	4b58      	ldr	r3, [pc, #352]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f36:	23c0      	movs	r3, #192	; 0xc0
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	23c0      	movs	r3, #192	; 0xc0
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d033      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d02e      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f62:	4a4e      	ldr	r2, [pc, #312]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f6c:	4b49      	ldr	r3, [pc, #292]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	0309      	lsls	r1, r1, #12
 8002f72:	430a      	orrs	r2, r1
 8002f74:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f7c:	4948      	ldr	r1, [pc, #288]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d014      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe f96f 	bl	8001274 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f96a 	bl	8001274 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e06d      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb0:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	23c0      	movs	r3, #192	; 0xc0
 8002fc2:	029b      	lsls	r3, r3, #10
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	23c0      	movs	r3, #192	; 0xc0
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002fce:	4b31      	ldr	r3, [pc, #196]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a35      	ldr	r2, [pc, #212]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	039b      	lsls	r3, r3, #14
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	23c0      	movs	r3, #192	; 0xc0
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ffc:	2317      	movs	r3, #23
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800300c:	4927      	ldr	r1, [pc, #156]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800300e:	400a      	ands	r2, r1
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2202      	movs	r2, #2
 8003018:	4013      	ands	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	220c      	movs	r2, #12
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800302c:	430a      	orrs	r2, r1
 800302e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2204      	movs	r2, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800304a:	430a      	orrs	r2, r1
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2208      	movs	r2, #8
 8003054:	4013      	ands	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003068:	430a      	orrs	r2, r1
 800306a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	4013      	ands	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003086:	430a      	orrs	r2, r1
 8003088:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	fffcffff 	.word	0xfffcffff
 80030a0:	fff7ffff 	.word	0xfff7ffff
 80030a4:	00001388 	.word	0x00001388
 80030a8:	ffcfffff 	.word	0xffcfffff
 80030ac:	efffffff 	.word	0xefffffff
 80030b0:	fffff3ff 	.word	0xfffff3ff
 80030b4:	ffffcfff 	.word	0xffffcfff
 80030b8:	fff3ffff 	.word	0xfff3ffff

080030bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07b      	b.n	80031c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	429a      	cmp	r2, r3
 80030e0:	d009      	beq.n	80030f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	61da      	str	r2, [r3, #28]
 80030e8:	e005      	b.n	80030f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2251      	movs	r2, #81	; 0x51
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2250      	movs	r2, #80	; 0x50
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f7fd ff70 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2251      	movs	r2, #81	; 0x51
 800311c:	2102      	movs	r1, #2
 800311e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	2382      	movs	r3, #130	; 0x82
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	2384      	movs	r3, #132	; 0x84
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	400b      	ands	r3, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	400b      	ands	r3, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2102      	movs	r1, #2
 8003158:	400b      	ands	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2101      	movs	r1, #1
 8003162:	400b      	ands	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	400b      	ands	r3, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2138      	movs	r1, #56	; 0x38
 8003178:	400b      	ands	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	400b      	ands	r3, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	0011      	movs	r1, r2
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2210      	movs	r2, #16
 80031ac:	401a      	ands	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2251      	movs	r2, #81	; 0x51
 80031c0:	2101      	movs	r1, #1
 80031c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b002      	add	sp, #8
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e044      	b.n	800326c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2274      	movs	r2, #116	; 0x74
 80031ee:	2100      	movs	r1, #0
 80031f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fd ff43 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0018      	movs	r0, r3
 8003214:	f000 f830 	bl	8003278 <UART_SetConfig>
 8003218:	0003      	movs	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e024      	b.n	800326c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fa85 	bl	800373c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	490d      	ldr	r1, [pc, #52]	; (8003274 <HAL_UART_Init+0xa4>)
 800323e:	400a      	ands	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	212a      	movs	r1, #42	; 0x2a
 800324e:	438a      	bics	r2, r1
 8003250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 fb1d 	bl	80038a4 <UART_CheckIdleState>
 800326a:	0003      	movs	r3, r0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	ffffb7ff 	.word	0xffffb7ff

08003278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af00      	add	r7, sp, #0
 800327e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003280:	231a      	movs	r3, #26
 8003282:	2218      	movs	r2, #24
 8003284:	4694      	mov	ip, r2
 8003286:	44bc      	add	ip, r7
 8003288:	4463      	add	r3, ip
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	431a      	orrs	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4abc      	ldr	r2, [pc, #752]	; (80035a0 <UART_SetConfig+0x328>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4ab8      	ldr	r2, [pc, #736]	; (80035a4 <UART_SetConfig+0x32c>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4ab2      	ldr	r2, [pc, #712]	; (80035a8 <UART_SetConfig+0x330>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ea:	4313      	orrs	r3, r2
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4aad      	ldr	r2, [pc, #692]	; (80035ac <UART_SetConfig+0x334>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4aa9      	ldr	r2, [pc, #676]	; (80035b0 <UART_SetConfig+0x338>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d136      	bne.n	800337c <UART_SetConfig+0x104>
 800330e:	4ba9      	ldr	r3, [pc, #676]	; (80035b4 <UART_SetConfig+0x33c>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	220c      	movs	r2, #12
 8003314:	4013      	ands	r3, r2
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d020      	beq.n	800335c <UART_SetConfig+0xe4>
 800331a:	d827      	bhi.n	800336c <UART_SetConfig+0xf4>
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00d      	beq.n	800333c <UART_SetConfig+0xc4>
 8003320:	d824      	bhi.n	800336c <UART_SetConfig+0xf4>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <UART_SetConfig+0xb4>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d010      	beq.n	800334c <UART_SetConfig+0xd4>
 800332a:	e01f      	b.n	800336c <UART_SetConfig+0xf4>
 800332c:	231b      	movs	r3, #27
 800332e:	2218      	movs	r2, #24
 8003330:	4694      	mov	ip, r2
 8003332:	44bc      	add	ip, r7
 8003334:	4463      	add	r3, ip
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e06f      	b.n	800341c <UART_SetConfig+0x1a4>
 800333c:	231b      	movs	r3, #27
 800333e:	2218      	movs	r2, #24
 8003340:	4694      	mov	ip, r2
 8003342:	44bc      	add	ip, r7
 8003344:	4463      	add	r3, ip
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e067      	b.n	800341c <UART_SetConfig+0x1a4>
 800334c:	231b      	movs	r3, #27
 800334e:	2218      	movs	r2, #24
 8003350:	4694      	mov	ip, r2
 8003352:	44bc      	add	ip, r7
 8003354:	4463      	add	r3, ip
 8003356:	2204      	movs	r2, #4
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e05f      	b.n	800341c <UART_SetConfig+0x1a4>
 800335c:	231b      	movs	r3, #27
 800335e:	2218      	movs	r2, #24
 8003360:	4694      	mov	ip, r2
 8003362:	44bc      	add	ip, r7
 8003364:	4463      	add	r3, ip
 8003366:	2208      	movs	r2, #8
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e057      	b.n	800341c <UART_SetConfig+0x1a4>
 800336c:	231b      	movs	r3, #27
 800336e:	2218      	movs	r2, #24
 8003370:	4694      	mov	ip, r2
 8003372:	44bc      	add	ip, r7
 8003374:	4463      	add	r3, ip
 8003376:	2210      	movs	r2, #16
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e04f      	b.n	800341c <UART_SetConfig+0x1a4>
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a89      	ldr	r2, [pc, #548]	; (80035a8 <UART_SetConfig+0x330>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d143      	bne.n	800340e <UART_SetConfig+0x196>
 8003386:	4b8b      	ldr	r3, [pc, #556]	; (80035b4 <UART_SetConfig+0x33c>)
 8003388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	4013      	ands	r3, r2
 8003390:	22c0      	movs	r2, #192	; 0xc0
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	4293      	cmp	r3, r2
 8003396:	d02a      	beq.n	80033ee <UART_SetConfig+0x176>
 8003398:	22c0      	movs	r2, #192	; 0xc0
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	4293      	cmp	r3, r2
 800339e:	d82e      	bhi.n	80033fe <UART_SetConfig+0x186>
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d012      	beq.n	80033ce <UART_SetConfig+0x156>
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d826      	bhi.n	80033fe <UART_SetConfig+0x186>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <UART_SetConfig+0x146>
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	00d2      	lsls	r2, r2, #3
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d010      	beq.n	80033de <UART_SetConfig+0x166>
 80033bc:	e01f      	b.n	80033fe <UART_SetConfig+0x186>
 80033be:	231b      	movs	r3, #27
 80033c0:	2218      	movs	r2, #24
 80033c2:	4694      	mov	ip, r2
 80033c4:	44bc      	add	ip, r7
 80033c6:	4463      	add	r3, ip
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e026      	b.n	800341c <UART_SetConfig+0x1a4>
 80033ce:	231b      	movs	r3, #27
 80033d0:	2218      	movs	r2, #24
 80033d2:	4694      	mov	ip, r2
 80033d4:	44bc      	add	ip, r7
 80033d6:	4463      	add	r3, ip
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e01e      	b.n	800341c <UART_SetConfig+0x1a4>
 80033de:	231b      	movs	r3, #27
 80033e0:	2218      	movs	r2, #24
 80033e2:	4694      	mov	ip, r2
 80033e4:	44bc      	add	ip, r7
 80033e6:	4463      	add	r3, ip
 80033e8:	2204      	movs	r2, #4
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e016      	b.n	800341c <UART_SetConfig+0x1a4>
 80033ee:	231b      	movs	r3, #27
 80033f0:	2218      	movs	r2, #24
 80033f2:	4694      	mov	ip, r2
 80033f4:	44bc      	add	ip, r7
 80033f6:	4463      	add	r3, ip
 80033f8:	2208      	movs	r2, #8
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e00e      	b.n	800341c <UART_SetConfig+0x1a4>
 80033fe:	231b      	movs	r3, #27
 8003400:	2218      	movs	r2, #24
 8003402:	4694      	mov	ip, r2
 8003404:	44bc      	add	ip, r7
 8003406:	4463      	add	r3, ip
 8003408:	2210      	movs	r2, #16
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e006      	b.n	800341c <UART_SetConfig+0x1a4>
 800340e:	231b      	movs	r3, #27
 8003410:	2218      	movs	r2, #24
 8003412:	4694      	mov	ip, r2
 8003414:	44bc      	add	ip, r7
 8003416:	4463      	add	r3, ip
 8003418:	2210      	movs	r2, #16
 800341a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <UART_SetConfig+0x330>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d000      	beq.n	8003428 <UART_SetConfig+0x1b0>
 8003426:	e088      	b.n	800353a <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003428:	231b      	movs	r3, #27
 800342a:	2218      	movs	r2, #24
 800342c:	4694      	mov	ip, r2
 800342e:	44bc      	add	ip, r7
 8003430:	4463      	add	r3, ip
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d01d      	beq.n	8003474 <UART_SetConfig+0x1fc>
 8003438:	dc20      	bgt.n	800347c <UART_SetConfig+0x204>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d015      	beq.n	800346a <UART_SetConfig+0x1f2>
 800343e:	dc1d      	bgt.n	800347c <UART_SetConfig+0x204>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <UART_SetConfig+0x1d2>
 8003444:	2b02      	cmp	r3, #2
 8003446:	d005      	beq.n	8003454 <UART_SetConfig+0x1dc>
 8003448:	e018      	b.n	800347c <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344a:	f7ff fce5 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 800344e:	0003      	movs	r3, r0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003452:	e01d      	b.n	8003490 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003454:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <UART_SetConfig+0x33c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2210      	movs	r2, #16
 800345a:	4013      	ands	r3, r2
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <UART_SetConfig+0x340>)
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003462:	e015      	b.n	8003490 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8003464:	4b55      	ldr	r3, [pc, #340]	; (80035bc <UART_SetConfig+0x344>)
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003468:	e012      	b.n	8003490 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7ff fc25 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 800346e:	0003      	movs	r3, r0
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003472:	e00d      	b.n	8003490 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800347a:	e009      	b.n	8003490 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003480:	231a      	movs	r3, #26
 8003482:	2218      	movs	r2, #24
 8003484:	4694      	mov	ip, r2
 8003486:	44bc      	add	ip, r7
 8003488:	4463      	add	r3, ip
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
        break;
 800348e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d100      	bne.n	8003498 <UART_SetConfig+0x220>
 8003496:	e139      	b.n	800370c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	0013      	movs	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	189b      	adds	r3, r3, r2
 80034a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d305      	bcc.n	80034b4 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d907      	bls.n	80034c4 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80034b4:	231a      	movs	r3, #26
 80034b6:	2218      	movs	r2, #24
 80034b8:	4694      	mov	ip, r2
 80034ba:	44bc      	add	ip, r7
 80034bc:	4463      	add	r3, ip
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e123      	b.n	800370c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	000b      	movs	r3, r1
 80034d2:	0e1b      	lsrs	r3, r3, #24
 80034d4:	0010      	movs	r0, r2
 80034d6:	0205      	lsls	r5, r0, #8
 80034d8:	431d      	orrs	r5, r3
 80034da:	000b      	movs	r3, r1
 80034dc:	021c      	lsls	r4, r3, #8
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	1900      	adds	r0, r0, r4
 80034f0:	4169      	adcs	r1, r5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f7fc fe8e 	bl	8000220 <__aeabi_uldivmod>
 8003504:	0002      	movs	r2, r0
 8003506:	000b      	movs	r3, r1
 8003508:	0013      	movs	r3, r2
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800350c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350e:	23c0      	movs	r3, #192	; 0xc0
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	429a      	cmp	r2, r3
 8003514:	d309      	bcc.n	800352a <UART_SetConfig+0x2b2>
 8003516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	035b      	lsls	r3, r3, #13
 800351c:	429a      	cmp	r2, r3
 800351e:	d204      	bcs.n	800352a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e0f0      	b.n	800370c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800352a:	231a      	movs	r3, #26
 800352c:	2218      	movs	r2, #24
 800352e:	4694      	mov	ip, r2
 8003530:	44bc      	add	ip, r7
 8003532:	4463      	add	r3, ip
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e0e8      	b.n	800370c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	429a      	cmp	r2, r3
 8003544:	d000      	beq.n	8003548 <UART_SetConfig+0x2d0>
 8003546:	e087      	b.n	8003658 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003548:	231b      	movs	r3, #27
 800354a:	2218      	movs	r2, #24
 800354c:	4694      	mov	ip, r2
 800354e:	44bc      	add	ip, r7
 8003550:	4463      	add	r3, ip
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d835      	bhi.n	80035c4 <UART_SetConfig+0x34c>
 8003558:	009a      	lsls	r2, r3, #2
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <UART_SetConfig+0x348>)
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003562:	f7ff fc59 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003566:	0003      	movs	r3, r0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800356a:	e035      	b.n	80035d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800356c:	f7ff fc6a 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003570:	0003      	movs	r3, r0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003574:	e030      	b.n	80035d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <UART_SetConfig+0x33c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2210      	movs	r2, #16
 800357c:	4013      	ands	r3, r2
 800357e:	d002      	beq.n	8003586 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <UART_SetConfig+0x340>)
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003584:	e028      	b.n	80035d8 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <UART_SetConfig+0x344>)
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800358a:	e025      	b.n	80035d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358c:	f7ff fb94 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8003590:	0003      	movs	r3, r0
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003594:	e020      	b.n	80035d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800359c:	e01c      	b.n	80035d8 <UART_SetConfig+0x360>
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	efff69f3 	.word	0xefff69f3
 80035a4:	ffffcfff 	.word	0xffffcfff
 80035a8:	40004800 	.word	0x40004800
 80035ac:	fffff4ff 	.word	0xfffff4ff
 80035b0:	40004400 	.word	0x40004400
 80035b4:	40021000 	.word	0x40021000
 80035b8:	003d0900 	.word	0x003d0900
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	08003b04 	.word	0x08003b04
      default:
        pclk = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035c8:	231a      	movs	r3, #26
 80035ca:	2218      	movs	r2, #24
 80035cc:	4694      	mov	ip, r2
 80035ce:	44bc      	add	ip, r7
 80035d0:	4463      	add	r3, ip
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
        break;
 80035d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d100      	bne.n	80035e0 <UART_SetConfig+0x368>
 80035de:	e095      	b.n	800370c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	005a      	lsls	r2, r3, #1
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	18d2      	adds	r2, r2, r3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0019      	movs	r1, r3
 80035f2:	0010      	movs	r0, r2
 80035f4:	f7fc fd88 	bl	8000108 <__udivsi3>
 80035f8:	0003      	movs	r3, r0
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2b0f      	cmp	r3, #15
 8003602:	d921      	bls.n	8003648 <UART_SetConfig+0x3d0>
 8003604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	025b      	lsls	r3, r3, #9
 800360a:	429a      	cmp	r2, r3
 800360c:	d21c      	bcs.n	8003648 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	b29a      	uxth	r2, r3
 8003612:	200e      	movs	r0, #14
 8003614:	2418      	movs	r4, #24
 8003616:	193b      	adds	r3, r7, r4
 8003618:	181b      	adds	r3, r3, r0
 800361a:	210f      	movs	r1, #15
 800361c:	438a      	bics	r2, r1
 800361e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	2207      	movs	r2, #7
 8003628:	4013      	ands	r3, r2
 800362a:	b299      	uxth	r1, r3
 800362c:	193b      	adds	r3, r7, r4
 800362e:	181b      	adds	r3, r3, r0
 8003630:	193a      	adds	r2, r7, r4
 8003632:	1812      	adds	r2, r2, r0
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	193a      	adds	r2, r7, r4
 8003640:	1812      	adds	r2, r2, r0
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e061      	b.n	800370c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003648:	231a      	movs	r3, #26
 800364a:	2218      	movs	r2, #24
 800364c:	4694      	mov	ip, r2
 800364e:	44bc      	add	ip, r7
 8003650:	4463      	add	r3, ip
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e059      	b.n	800370c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003658:	231b      	movs	r3, #27
 800365a:	2218      	movs	r2, #24
 800365c:	4694      	mov	ip, r2
 800365e:	44bc      	add	ip, r7
 8003660:	4463      	add	r3, ip
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d822      	bhi.n	80036ae <UART_SetConfig+0x436>
 8003668:	009a      	lsls	r2, r3, #2
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <UART_SetConfig+0x4b4>)
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003672:	f7ff fbd1 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003676:	0003      	movs	r3, r0
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800367a:	e022      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff fbe2 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003680:	0003      	movs	r3, r0
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003684:	e01d      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <UART_SetConfig+0x4b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	4013      	ands	r3, r2
 800368e:	d002      	beq.n	8003696 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <UART_SetConfig+0x4bc>)
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003694:	e015      	b.n	80036c2 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <UART_SetConfig+0x4c0>)
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800369a:	e012      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369c:	f7ff fb0c 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80036a0:	0003      	movs	r3, r0
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036a4:	e00d      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036ac:	e009      	b.n	80036c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036b2:	231a      	movs	r3, #26
 80036b4:	2218      	movs	r2, #24
 80036b6:	4694      	mov	ip, r2
 80036b8:	44bc      	add	ip, r7
 80036ba:	4463      	add	r3, ip
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
        break;
 80036c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d021      	beq.n	800370c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085a      	lsrs	r2, r3, #1
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0019      	movs	r1, r3
 80036d8:	0010      	movs	r0, r2
 80036da:	f7fc fd15 	bl	8000108 <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	d909      	bls.n	80036fe <UART_SetConfig+0x486>
 80036ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	025b      	lsls	r3, r3, #9
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d204      	bcs.n	80036fe <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	e006      	b.n	800370c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80036fe:	231a      	movs	r3, #26
 8003700:	2218      	movs	r2, #24
 8003702:	4694      	mov	ip, r2
 8003704:	44bc      	add	ip, r7
 8003706:	4463      	add	r3, ip
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2200      	movs	r2, #0
 8003710:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2200      	movs	r2, #0
 8003716:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003718:	231a      	movs	r3, #26
 800371a:	2218      	movs	r2, #24
 800371c:	4694      	mov	ip, r2
 800371e:	44bc      	add	ip, r7
 8003720:	4463      	add	r3, ip
 8003722:	781b      	ldrb	r3, [r3, #0]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b00e      	add	sp, #56	; 0x38
 800372a:	bdb0      	pop	{r4, r5, r7, pc}
 800372c:	08003b28 	.word	0x08003b28
 8003730:	40021000 	.word	0x40021000
 8003734:	003d0900 	.word	0x003d0900
 8003738:	00f42400 	.word	0x00f42400

0800373c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2201      	movs	r2, #1
 800374a:	4013      	ands	r3, r2
 800374c:	d00b      	beq.n	8003766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <UART_AdvFeatureConfig+0x144>)
 8003756:	4013      	ands	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d00b      	beq.n	8003788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4a43      	ldr	r2, [pc, #268]	; (8003884 <UART_AdvFeatureConfig+0x148>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2204      	movs	r2, #4
 800378e:	4013      	ands	r3, r2
 8003790:	d00b      	beq.n	80037aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <UART_AdvFeatureConfig+0x14c>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2208      	movs	r2, #8
 80037b0:	4013      	ands	r3, r2
 80037b2:	d00b      	beq.n	80037cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a34      	ldr	r2, [pc, #208]	; (800388c <UART_AdvFeatureConfig+0x150>)
 80037bc:	4013      	ands	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	d00b      	beq.n	80037ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <UART_AdvFeatureConfig+0x154>)
 80037de:	4013      	ands	r3, r2
 80037e0:	0019      	movs	r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2220      	movs	r2, #32
 80037f4:	4013      	ands	r3, r2
 80037f6:	d00b      	beq.n	8003810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a25      	ldr	r2, [pc, #148]	; (8003894 <UART_AdvFeatureConfig+0x158>)
 8003800:	4013      	ands	r3, r2
 8003802:	0019      	movs	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	4013      	ands	r3, r2
 8003818:	d01d      	beq.n	8003856 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <UART_AdvFeatureConfig+0x15c>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	035b      	lsls	r3, r3, #13
 800383a:	429a      	cmp	r2, r3
 800383c:	d10b      	bne.n	8003856 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <UART_AdvFeatureConfig+0x160>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	4013      	ands	r3, r2
 800385e:	d00b      	beq.n	8003878 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <UART_AdvFeatureConfig+0x164>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffdffff 	.word	0xfffdffff
 8003884:	fffeffff 	.word	0xfffeffff
 8003888:	fffbffff 	.word	0xfffbffff
 800388c:	ffff7fff 	.word	0xffff7fff
 8003890:	ffffefff 	.word	0xffffefff
 8003894:	ffffdfff 	.word	0xffffdfff
 8003898:	ffefffff 	.word	0xffefffff
 800389c:	ff9fffff 	.word	0xff9fffff
 80038a0:	fff7ffff 	.word	0xfff7ffff

080038a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	2100      	movs	r1, #0
 80038b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b4:	f7fd fcde 	bl	8001274 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d10c      	bne.n	80038e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0391      	lsls	r1, r2, #14
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <UART_CheckIdleState+0x8c>)
 80038d4:	9200      	str	r2, [sp, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f000 f82c 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d001      	beq.n	80038e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e021      	b.n	8003928 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d10c      	bne.n	800390c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	03d1      	lsls	r1, r2, #15
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <UART_CheckIdleState+0x8c>)
 80038fc:	9200      	str	r2, [sp, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	f000 f818 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d001      	beq.n	800390c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e00d      	b.n	8003928 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2274      	movs	r2, #116	; 0x74
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}
 8003930:	01ffffff 	.word	0x01ffffff

08003934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003944:	e05e      	b.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3301      	adds	r3, #1
 800394a:	d05b      	beq.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394c:	f7fd fc92 	bl	8001274 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <UART_WaitOnFlagUntilTimeout+0x2e>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11b      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	492f      	ldr	r1, [pc, #188]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	438a      	bics	r2, r1
 8003980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2274      	movs	r2, #116	; 0x74
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e044      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d02e      	beq.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	401a      	ands	r2, r3
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d124      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4917      	ldr	r1, [pc, #92]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	438a      	bics	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2274      	movs	r2, #116	; 0x74
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e00f      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	425a      	negs	r2, r3
 8003a14:	4153      	adcs	r3, r2
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	001a      	movs	r2, r3
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d091      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	fffffe5f 	.word	0xfffffe5f

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2600      	movs	r6, #0
 8003a34:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <__libc_init_array+0x38>)
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	2600      	movs	r6, #0
 8003a42:	f000 f821 	bl	8003a88 <_init>
 8003a46:	4d0a      	ldr	r5, [pc, #40]	; (8003a70 <__libc_init_array+0x40>)
 8003a48:	4c0a      	ldr	r4, [pc, #40]	; (8003a74 <__libc_init_array+0x44>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	00b3      	lsls	r3, r6, #2
 8003a56:	58eb      	ldr	r3, [r5, r3]
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	00b3      	lsls	r3, r6, #2
 8003a60:	58eb      	ldr	r3, [r5, r3]
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003b54 	.word	0x08003b54
 8003a6c:	08003b54 	.word	0x08003b54
 8003a70:	08003b54 	.word	0x08003b54
 8003a74:	08003b58 	.word	0x08003b58

08003a78 <memset>:
 8003a78:	0003      	movs	r3, r0
 8003a7a:	1882      	adds	r2, r0, r2
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <memset+0xa>
 8003a80:	4770      	bx	lr
 8003a82:	7019      	strb	r1, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	e7f9      	b.n	8003a7c <memset+0x4>

08003a88 <_init>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr

08003a94 <_fini>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr
